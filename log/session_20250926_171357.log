2025-09-26 17:13:57,044 - INFO - Логирование настроено. Файл лога: log\session_20250926_171357.log
2025-09-26 17:13:57,047 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\children-voice.mp3
2025-09-26 17:13:58,441 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1137)
           2	RESUME(arg=0, lineno=1137)
           4	LOAD_FAST(arg=0, lineno=1140)
           6	LOAD_CONST(arg=1, lineno=1140)
           8	BINARY_SUBSCR(arg=None, lineno=1140)
          12	STORE_FAST(arg=3, lineno=1140)
          14	LOAD_FAST(arg=1, lineno=1141)
          16	UNARY_NEGATIVE(arg=None, lineno=1141)
          18	LOAD_FAST(arg=3, lineno=1141)
          20	SWAP(arg=2, lineno=1141)
          22	COPY(arg=2, lineno=1141)
          24	COMPARE_OP(arg=58, lineno=1141)
          28	POP_JUMP_IF_FALSE(arg=6, lineno=1141)
          32	LOAD_FAST(arg=1, lineno=1141)
          34	COMPARE_OP(arg=58, lineno=1141)
          38	POP_JUMP_IF_FALSE(arg=5, lineno=1141)
          42	JUMP_FORWARD(arg=2, lineno=1141)
>         44	POP_TOP(arg=None, lineno=1141)
          46	JUMP_FORWARD(arg=2, lineno=1141)
>         48	LOAD_CONST(arg=1, lineno=1142)
          50	STORE_FAST(arg=3, lineno=1142)
>         52	LOAD_FAST(arg=0, lineno=1144)
          54	LOAD_CONST(arg=2, lineno=1144)
          56	BINARY_SUBSCR(arg=None, lineno=1144)
          60	STORE_FAST(arg=4, lineno=1144)
          62	LOAD_FAST(arg=1, lineno=1145)
          64	UNARY_NEGATIVE(arg=None, lineno=1145)
          66	LOAD_FAST(arg=4, lineno=1145)
          68	SWAP(arg=2, lineno=1145)
          70	COPY(arg=2, lineno=1145)
          72	COMPARE_OP(arg=58, lineno=1145)
          76	POP_JUMP_IF_FALSE(arg=6, lineno=1145)
          80	LOAD_FAST(arg=1, lineno=1145)
          82	COMPARE_OP(arg=58, lineno=1145)
          86	POP_JUMP_IF_FALSE(arg=5, lineno=1145)
          90	JUMP_FORWARD(arg=2, lineno=1145)
>         92	POP_TOP(arg=None, lineno=1145)
          94	JUMP_FORWARD(arg=2, lineno=1145)
>         96	LOAD_CONST(arg=1, lineno=1146)
          98	STORE_FAST(arg=4, lineno=1146)
>        100	LOAD_FAST(arg=2, lineno=1148)
         102	TO_BOOL(arg=None, lineno=1148)
         110	POP_JUMP_IF_FALSE(arg=45, lineno=1148)
         114	LOAD_GLOBAL(arg=0, lineno=1149)
         124	LOAD_ATTR(arg=2, lineno=1149)
         144	PUSH_NULL(arg=None, lineno=1149)
         146	LOAD_FAST(arg=3, lineno=1149)
         148	CALL(arg=1, lineno=1149)
         156	LOAD_GLOBAL(arg=0, lineno=1149)
         166	LOAD_ATTR(arg=2, lineno=1149)
         186	PUSH_NULL(arg=None, lineno=1149)
         188	LOAD_FAST(arg=4, lineno=1149)
         190	CALL(arg=1, lineno=1149)
         198	COMPARE_OP(arg=103, lineno=1149)
         202	RETURN_VALUE(arg=None, lineno=1149)
>        204	LOAD_GLOBAL(arg=0, lineno=1151)
         214	LOAD_ATTR(arg=4, lineno=1151)
         234	PUSH_NULL(arg=None, lineno=1151)
         236	LOAD_FAST(arg=3, lineno=1151)
         238	CALL(arg=1, lineno=1151)
         246	LOAD_GLOBAL(arg=0, lineno=1151)
         256	LOAD_ATTR(arg=4, lineno=1151)
         276	PUSH_NULL(arg=None, lineno=1151)
         278	LOAD_FAST(arg=4, lineno=1151)
         280	CALL(arg=1, lineno=1151)
         288	COMPARE_OP(arg=103, lineno=1151)
         292	RETURN_VALUE(arg=None, lineno=1151)
2025-09-26 17:13:58,444 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-09-26 17:13:58,444 - DEBUG - stack: []
2025-09-26 17:13:58,444 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-09-26 17:13:58,444 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1137)
2025-09-26 17:13:58,445 - DEBUG - stack []
2025-09-26 17:13:58,445 - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1137)
2025-09-26 17:13:58,445 - DEBUG - stack []
2025-09-26 17:13:58,445 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1140)
2025-09-26 17:13:58,445 - DEBUG - stack []
2025-09-26 17:13:58,446 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1140)
2025-09-26 17:13:58,446 - DEBUG - stack ['$x4.0']
2025-09-26 17:13:58,446 - DEBUG - dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1140)
2025-09-26 17:13:58,446 - DEBUG - stack ['$x4.0', '$const6.1.1']
2025-09-26 17:13:58,446 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1140)
2025-09-26 17:13:58,446 - DEBUG - stack ['$8binary_subscr.2']
2025-09-26 17:13:58,447 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1141)
2025-09-26 17:13:58,447 - DEBUG - stack []
2025-09-26 17:13:58,447 - DEBUG - dispatch pc=16, inst=UNARY_NEGATIVE(arg=None, lineno=1141)
2025-09-26 17:13:58,447 - DEBUG - stack ['$threshold14.3']
2025-09-26 17:13:58,447 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=1141)
2025-09-26 17:13:58,447 - DEBUG - stack ['$16unary_negative.4']
2025-09-26 17:13:58,447 - DEBUG - dispatch pc=20, inst=SWAP(arg=2, lineno=1141)
2025-09-26 17:13:58,447 - DEBUG - stack ['$16unary_negative.4', '$x018.5']
2025-09-26 17:13:58,447 - DEBUG - dispatch pc=22, inst=COPY(arg=2, lineno=1141)
2025-09-26 17:13:58,448 - DEBUG - stack ['$x018.5', '$16unary_negative.4']
2025-09-26 17:13:58,448 - DEBUG - dispatch pc=24, inst=COMPARE_OP(arg=58, lineno=1141)
2025-09-26 17:13:58,448 - DEBUG - stack ['$x018.5', '$16unary_negative.4', '$x018.5']
2025-09-26 17:13:58,448 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=6, lineno=1141)
2025-09-26 17:13:58,448 - DEBUG - stack ['$x018.5', '$24compare_op.6']
2025-09-26 17:13:58,448 - DEBUG - end state. edges=[Edge(pc=32, stack=('$x018.5',), blockstack=(), npush=0), Edge(pc=44, stack=('$x018.5',), blockstack=(), npush=0)]
2025-09-26 17:13:58,448 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=44 nstack_initial=1)])
2025-09-26 17:13:58,448 - DEBUG - stack: ['$phi32.0']
2025-09-26 17:13:58,449 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-09-26 17:13:58,449 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1141)
2025-09-26 17:13:58,449 - DEBUG - stack ['$phi32.0']
2025-09-26 17:13:58,449 - DEBUG - dispatch pc=34, inst=COMPARE_OP(arg=58, lineno=1141)
2025-09-26 17:13:58,449 - DEBUG - stack ['$phi32.0', '$threshold32.1']
2025-09-26 17:13:58,449 - DEBUG - dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=5, lineno=1141)
2025-09-26 17:13:58,449 - DEBUG - stack ['$34compare_op.2']
2025-09-26 17:13:58,449 - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,449 - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=1), State(pc_initial=42 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2025-09-26 17:13:58,450 - DEBUG - stack: ['$phi44.0']
2025-09-26 17:13:58,450 - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=1)
2025-09-26 17:13:58,450 - DEBUG - dispatch pc=44, inst=POP_TOP(arg=None, lineno=1141)
2025-09-26 17:13:58,450 - DEBUG - stack ['$phi44.0']
2025-09-26 17:13:58,450 - DEBUG - dispatch pc=46, inst=JUMP_FORWARD(arg=2, lineno=1141)
2025-09-26 17:13:58,450 - DEBUG - stack []
2025-09-26 17:13:58,450 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,450 - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2025-09-26 17:13:58,450 - DEBUG - stack: []
2025-09-26 17:13:58,451 - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-09-26 17:13:58,451 - DEBUG - dispatch pc=42, inst=JUMP_FORWARD(arg=2, lineno=1141)
2025-09-26 17:13:58,451 - DEBUG - stack []
2025-09-26 17:13:58,451 - DEBUG - end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,451 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2025-09-26 17:13:58,451 - DEBUG - stack: []
2025-09-26 17:13:58,451 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-09-26 17:13:58,451 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1144)
2025-09-26 17:13:58,451 - DEBUG - stack []
2025-09-26 17:13:58,451 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=1144)
2025-09-26 17:13:58,452 - DEBUG - stack ['$x52.0']
2025-09-26 17:13:58,452 - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-09-26 17:13:58,452 - DEBUG - stack ['$x52.0', '$const54.1.2']
2025-09-26 17:13:58,452 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=4, lineno=1144)
2025-09-26 17:13:58,452 - DEBUG - stack ['$56binary_subscr.2']
2025-09-26 17:13:58,452 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1145)
2025-09-26 17:13:58,452 - DEBUG - stack []
2025-09-26 17:13:58,452 - DEBUG - dispatch pc=64, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-09-26 17:13:58,452 - DEBUG - stack ['$threshold62.3']
2025-09-26 17:13:58,453 - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=1145)
2025-09-26 17:13:58,453 - DEBUG - stack ['$64unary_negative.4']
2025-09-26 17:13:58,453 - DEBUG - dispatch pc=68, inst=SWAP(arg=2, lineno=1145)
2025-09-26 17:13:58,453 - DEBUG - stack ['$64unary_negative.4', '$x166.5']
2025-09-26 17:13:58,453 - DEBUG - dispatch pc=70, inst=COPY(arg=2, lineno=1145)
2025-09-26 17:13:58,453 - DEBUG - stack ['$x166.5', '$64unary_negative.4']
2025-09-26 17:13:58,453 - DEBUG - dispatch pc=72, inst=COMPARE_OP(arg=58, lineno=1145)
2025-09-26 17:13:58,453 - DEBUG - stack ['$x166.5', '$64unary_negative.4', '$x166.5']
2025-09-26 17:13:58,453 - DEBUG - dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=6, lineno=1145)
2025-09-26 17:13:58,453 - DEBUG - stack ['$x166.5', '$72compare_op.6']
2025-09-26 17:13:58,454 - DEBUG - end state. edges=[Edge(pc=80, stack=('$x166.5',), blockstack=(), npush=0), Edge(pc=92, stack=('$x166.5',), blockstack=(), npush=0)]
2025-09-26 17:13:58,454 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=80 nstack_initial=1), State(pc_initial=92 nstack_initial=1)])
2025-09-26 17:13:58,454 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=80 nstack_initial=1), State(pc_initial=92 nstack_initial=1)])
2025-09-26 17:13:58,454 - DEBUG - stack: []
2025-09-26 17:13:58,454 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2025-09-26 17:13:58,454 - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=1142)
2025-09-26 17:13:58,454 - DEBUG - stack []
2025-09-26 17:13:58,454 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=3, lineno=1142)
2025-09-26 17:13:58,455 - DEBUG - stack ['$const48.0.1']
2025-09-26 17:13:58,455 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,455 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=92 nstack_initial=1), State(pc_initial=52 nstack_initial=0)])
2025-09-26 17:13:58,455 - DEBUG - stack: ['$phi80.0']
2025-09-26 17:13:58,455 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-09-26 17:13:58,455 - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=1145)
2025-09-26 17:13:58,455 - DEBUG - stack ['$phi80.0']
2025-09-26 17:13:58,455 - DEBUG - dispatch pc=82, inst=COMPARE_OP(arg=58, lineno=1145)
2025-09-26 17:13:58,456 - DEBUG - stack ['$phi80.0', '$threshold80.1']
2025-09-26 17:13:58,456 - DEBUG - dispatch pc=86, inst=POP_JUMP_IF_FALSE(arg=5, lineno=1145)
2025-09-26 17:13:58,456 - DEBUG - stack ['$82compare_op.2']
2025-09-26 17:13:58,456 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=100, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,456 - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=1), State(pc_initial=52 nstack_initial=0), State(pc_initial=90 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2025-09-26 17:13:58,456 - DEBUG - stack: ['$phi92.0']
2025-09-26 17:13:58,456 - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=1)
2025-09-26 17:13:58,457 - DEBUG - dispatch pc=92, inst=POP_TOP(arg=None, lineno=1145)
2025-09-26 17:13:58,457 - DEBUG - stack ['$phi92.0']
2025-09-26 17:13:58,457 - DEBUG - dispatch pc=94, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-09-26 17:13:58,457 - DEBUG - stack []
2025-09-26 17:13:58,457 - DEBUG - end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,457 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=90 nstack_initial=0), State(pc_initial=100 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2025-09-26 17:13:58,457 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=100 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2025-09-26 17:13:58,457 - DEBUG - stack: []
2025-09-26 17:13:58,458 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-09-26 17:13:58,458 - DEBUG - dispatch pc=90, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-09-26 17:13:58,458 - DEBUG - stack []
2025-09-26 17:13:58,458 - DEBUG - end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,458 - DEBUG - pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=100 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-09-26 17:13:58,458 - DEBUG - stack: []
2025-09-26 17:13:58,458 - DEBUG - state.pc_initial: State(pc_initial=100 nstack_initial=0)
2025-09-26 17:13:58,459 - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=1148)
2025-09-26 17:13:58,459 - DEBUG - stack []
2025-09-26 17:13:58,459 - DEBUG - dispatch pc=102, inst=TO_BOOL(arg=None, lineno=1148)
2025-09-26 17:13:58,459 - DEBUG - stack ['$zero_pos100.0']
2025-09-26 17:13:58,459 - DEBUG - dispatch pc=110, inst=POP_JUMP_IF_FALSE(arg=45, lineno=1148)
2025-09-26 17:13:58,459 - DEBUG - stack ['$102to_bool.1']
2025-09-26 17:13:58,459 - DEBUG - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=204, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,459 - DEBUG - pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=204 nstack_initial=0)])
2025-09-26 17:13:58,460 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=204 nstack_initial=0)])
2025-09-26 17:13:58,460 - DEBUG - stack: []
2025-09-26 17:13:58,460 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2025-09-26 17:13:58,460 - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=1, lineno=1146)
2025-09-26 17:13:58,460 - DEBUG - stack []
2025-09-26 17:13:58,460 - DEBUG - dispatch pc=98, inst=STORE_FAST(arg=4, lineno=1146)
2025-09-26 17:13:58,460 - DEBUG - stack ['$const96.0.1']
2025-09-26 17:13:58,460 - DEBUG - end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0)]
2025-09-26 17:13:58,460 - DEBUG - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=204 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2025-09-26 17:13:58,461 - DEBUG - stack: []
2025-09-26 17:13:58,461 - DEBUG - state.pc_initial: State(pc_initial=114 nstack_initial=0)
2025-09-26 17:13:58,461 - DEBUG - dispatch pc=114, inst=LOAD_GLOBAL(arg=0, lineno=1149)
2025-09-26 17:13:58,461 - DEBUG - stack []
2025-09-26 17:13:58,461 - DEBUG - dispatch pc=124, inst=LOAD_ATTR(arg=2, lineno=1149)
2025-09-26 17:13:58,461 - DEBUG - stack ['$114load_global.0']
2025-09-26 17:13:58,461 - DEBUG - dispatch pc=144, inst=PUSH_NULL(arg=None, lineno=1149)
2025-09-26 17:13:58,461 - DEBUG - stack ['$124load_attr.1']
2025-09-26 17:13:58,461 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=3, lineno=1149)
2025-09-26 17:13:58,461 - DEBUG - stack ['$124load_attr.1', '$null$144.2']
2025-09-26 17:13:58,462 - DEBUG - dispatch pc=148, inst=CALL(arg=1, lineno=1149)
2025-09-26 17:13:58,462 - DEBUG - stack ['$124load_attr.1', '$null$144.2', '$x0146.3']
2025-09-26 17:13:58,462 - DEBUG - dispatch pc=156, inst=LOAD_GLOBAL(arg=0, lineno=1149)
2025-09-26 17:13:58,462 - DEBUG - stack ['$148call.4']
2025-09-26 17:13:58,462 - DEBUG - dispatch pc=166, inst=LOAD_ATTR(arg=2, lineno=1149)
2025-09-26 17:13:58,462 - DEBUG - stack ['$148call.4', '$156load_global.5']
2025-09-26 17:13:58,462 - DEBUG - dispatch pc=186, inst=PUSH_NULL(arg=None, lineno=1149)
2025-09-26 17:13:58,462 - DEBUG - stack ['$148call.4', '$166load_attr.6']
2025-09-26 17:13:58,462 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=1149)
2025-09-26 17:13:58,462 - DEBUG - stack ['$148call.4', '$166load_attr.6', '$null$186.7']
2025-09-26 17:13:58,463 - DEBUG - dispatch pc=190, inst=CALL(arg=1, lineno=1149)
2025-09-26 17:13:58,463 - DEBUG - stack ['$148call.4', '$166load_attr.6', '$null$186.7', '$x1188.8']
2025-09-26 17:13:58,463 - DEBUG - dispatch pc=198, inst=COMPARE_OP(arg=103, lineno=1149)
2025-09-26 17:13:58,463 - DEBUG - stack ['$148call.4', '$190call.9']
2025-09-26 17:13:58,463 - DEBUG - dispatch pc=202, inst=RETURN_VALUE(arg=None, lineno=1149)
2025-09-26 17:13:58,463 - DEBUG - stack ['$198compare_op.10']
2025-09-26 17:13:58,463 - DEBUG - end state. edges=[]
2025-09-26 17:13:58,463 - DEBUG - pending: deque([State(pc_initial=204 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2025-09-26 17:13:58,464 - DEBUG - stack: []
2025-09-26 17:13:58,464 - DEBUG - state.pc_initial: State(pc_initial=204 nstack_initial=0)
2025-09-26 17:13:58,464 - DEBUG - dispatch pc=204, inst=LOAD_GLOBAL(arg=0, lineno=1151)
2025-09-26 17:13:58,464 - DEBUG - stack []
2025-09-26 17:13:58,464 - DEBUG - dispatch pc=214, inst=LOAD_ATTR(arg=4, lineno=1151)
2025-09-26 17:13:58,464 - DEBUG - stack ['$204load_global.0']
2025-09-26 17:13:58,464 - DEBUG - dispatch pc=234, inst=PUSH_NULL(arg=None, lineno=1151)
2025-09-26 17:13:58,464 - DEBUG - stack ['$214load_attr.1']
2025-09-26 17:13:58,465 - DEBUG - dispatch pc=236, inst=LOAD_FAST(arg=3, lineno=1151)
2025-09-26 17:13:58,465 - DEBUG - stack ['$214load_attr.1', '$null$234.2']
2025-09-26 17:13:58,465 - DEBUG - dispatch pc=238, inst=CALL(arg=1, lineno=1151)
2025-09-26 17:13:58,465 - DEBUG - stack ['$214load_attr.1', '$null$234.2', '$x0236.3']
2025-09-26 17:13:58,465 - DEBUG - dispatch pc=246, inst=LOAD_GLOBAL(arg=0, lineno=1151)
2025-09-26 17:13:58,465 - DEBUG - stack ['$238call.4']
2025-09-26 17:13:58,465 - DEBUG - dispatch pc=256, inst=LOAD_ATTR(arg=4, lineno=1151)
2025-09-26 17:13:58,466 - DEBUG - stack ['$238call.4', '$246load_global.5']
2025-09-26 17:13:58,466 - DEBUG - dispatch pc=276, inst=PUSH_NULL(arg=None, lineno=1151)
2025-09-26 17:13:58,466 - DEBUG - stack ['$238call.4', '$256load_attr.6']
2025-09-26 17:13:58,466 - DEBUG - dispatch pc=278, inst=LOAD_FAST(arg=4, lineno=1151)
2025-09-26 17:13:58,466 - DEBUG - stack ['$238call.4', '$256load_attr.6', '$null$276.7']
2025-09-26 17:13:58,466 - DEBUG - dispatch pc=280, inst=CALL(arg=1, lineno=1151)
2025-09-26 17:13:58,467 - DEBUG - stack ['$238call.4', '$256load_attr.6', '$null$276.7', '$x1278.8']
2025-09-26 17:13:58,467 - DEBUG - dispatch pc=288, inst=COMPARE_OP(arg=103, lineno=1151)
2025-09-26 17:13:58,467 - DEBUG - stack ['$238call.4', '$280call.9']
2025-09-26 17:13:58,467 - DEBUG - dispatch pc=292, inst=RETURN_VALUE(arg=None, lineno=1151)
2025-09-26 17:13:58,467 - DEBUG - stack ['$288compare_op.10']
2025-09-26 17:13:58,467 - DEBUG - end state. edges=[]
2025-09-26 17:13:58,467 - DEBUG - pending: deque([State(pc_initial=100 nstack_initial=0)])
2025-09-26 17:13:58,468 - DEBUG - -------------------------Prune PHIs-------------------------
2025-09-26 17:13:58,468 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=1): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=1): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=204 nstack_initial=0): set()})
2025-09-26 17:13:58,468 - DEBUG - defmap: {'$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi44.0': State(pc_initial=0 nstack_initial=0),
 '$phi80.0': State(pc_initial=52 nstack_initial=0),
 '$phi92.0': State(pc_initial=52 nstack_initial=0)}
2025-09-26 17:13:58,468 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$x166.5', State(pc_initial=52 nstack_initial=0))},
             '$phi92.0': {('$x166.5', State(pc_initial=52 nstack_initial=0))}})
2025-09-26 17:13:58,469 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$x166.5', State(pc_initial=52 nstack_initial=0))},
             '$phi92.0': {('$x166.5', State(pc_initial=52 nstack_initial=0))}})
2025-09-26 17:13:58,469 - DEBUG - keep phismap: {'$phi32.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
 '$phi80.0': {('$x166.5', State(pc_initial=52 nstack_initial=0))}}
2025-09-26 17:13:58,469 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$x018.5'},
             State(pc_initial=52 nstack_initial=0): {'$phi80.0': '$x166.5'}})
2025-09-26 17:13:58,469 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-09-26 17:13:58,470 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1.1'}), (8, {'index': '$const6.1.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (12, {'value': '$8binary_subscr.2'}), (14, {'res': '$threshold14.3'}), (16, {'value': '$threshold14.3', 'res': '$16unary_negative.4'}), (18, {'res': '$x018.5'}), (24, {'lhs': '$16unary_negative.4', 'rhs': '$x018.5', 'res': '$24compare_op.6'}), (28, {'pred': '$24compare_op.6'})), outgoing_phis={'$phi32.0': '$x018.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$x018.5',), 44: ('$x018.5',)})
2025-09-26 17:13:58,470 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'res': '$threshold32.1'}), (34, {'lhs': '$phi32.0', 'rhs': '$threshold32.1', 'res': '$34compare_op.2'}), (38, {'pred': '$34compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 52: ()})
2025-09-26 17:13:58,470 - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ()})
2025-09-26 17:13:58,470 - DEBUG - block_infos State(pc_initial=44 nstack_initial=1):
AdaptBlockInfo(insts=((46, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ()})
2025-09-26 17:13:58,470 - DEBUG - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$const48.0.1'}), (50, {'value': '$const48.0.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ()})
2025-09-26 17:13:58,471 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$x52.0'}), (54, {'res': '$const54.1.2'}), (56, {'index': '$const54.1.2', 'target': '$x52.0', 'res': '$56binary_subscr.2'}), (60, {'value': '$56binary_subscr.2'}), (62, {'res': '$threshold62.3'}), (64, {'value': '$threshold62.3', 'res': '$64unary_negative.4'}), (66, {'res': '$x166.5'}), (72, {'lhs': '$64unary_negative.4', 'rhs': '$x166.5', 'res': '$72compare_op.6'}), (76, {'pred': '$72compare_op.6'})), outgoing_phis={'$phi80.0': '$x166.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$x166.5',), 92: ('$x166.5',)})
2025-09-26 17:13:58,471 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$threshold80.1'}), (82, {'lhs': '$phi80.0', 'rhs': '$threshold80.1', 'res': '$82compare_op.2'}), (86, {'pred': '$82compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 100: ()})
2025-09-26 17:13:58,471 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
2025-09-26 17:13:58,471 - DEBUG - block_infos State(pc_initial=92 nstack_initial=1):
AdaptBlockInfo(insts=((94, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: ()})
2025-09-26 17:13:58,471 - DEBUG - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$const96.0.1'}), (98, {'value': '$const96.0.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: ()})
2025-09-26 17:13:58,471 - DEBUG - block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$zero_pos100.0'}), (102, {'val': '$zero_pos100.0', 'res': '$102to_bool.1'}), (110, {'pred': '$102to_bool.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 204: ()})
2025-09-26 17:13:58,472 - DEBUG - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'idx': 0, 'res': '$114load_global.0'}), (124, {'item': '$114load_global.0', 'res': '$124load_attr.1'}), (144, {}), (146, {'res': '$x0146.3'}), (148, {'func': '$124load_attr.1', 'args': ['$x0146.3'], 'kw_names': None, 'res': '$148call.4'}), (156, {'idx': 0, 'res': '$156load_global.5'}), (166, {'item': '$156load_global.5', 'res': '$166load_attr.6'}), (186, {}), (188, {'res': '$x1188.8'}), (190, {'func': '$166load_attr.6', 'args': ['$x1188.8'], 'kw_names': None, 'res': '$190call.9'}), (198, {'lhs': '$148call.4', 'rhs': '$190call.9', 'res': '$198compare_op.10'}), (202, {'retval': '$198compare_op.10', 'castval': '$202return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-09-26 17:13:58,472 - DEBUG - block_infos State(pc_initial=204 nstack_initial=0):
AdaptBlockInfo(insts=((204, {'idx': 0, 'res': '$204load_global.0'}), (214, {'item': '$204load_global.0', 'res': '$214load_attr.1'}), (234, {}), (236, {'res': '$x0236.3'}), (238, {'func': '$214load_attr.1', 'args': ['$x0236.3'], 'kw_names': None, 'res': '$238call.4'}), (246, {'idx': 0, 'res': '$246load_global.5'}), (256, {'item': '$246load_global.5', 'res': '$256load_attr.6'}), (276, {}), (278, {'res': '$x1278.8'}), (280, {'func': '$256load_attr.6', 'args': ['$x1278.8'], 'kw_names': None, 'res': '$280call.9'}), (288, {'lhs': '$238call.4', 'rhs': '$280call.9', 'res': '$288compare_op.10'}), (292, {'retval': '$288compare_op.10', 'castval': '$292return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-09-26 17:13:58,473 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const6.1.1 = const(int, 0)              ['$const6.1.1']
    x0 = getitem(value=x, index=$const6.1.1, fn=<built-in function getitem>) ['$const6.1.1', 'x', 'x0']
    $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$16unary_negative.4', 'threshold']
    $24compare_op.6 = $16unary_negative.4 <= x0 ['$16unary_negative.4', '$24compare_op.6', 'x0']
    $bool28 = global(bool: <class 'bool'>)   ['$bool28']
    $28pred = call $bool28($24compare_op.6, func=$bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.6', '$28pred', '$bool28']
    $phi32.0 = x0                            ['$phi32.0', 'x0']
    branch $28pred, 32, 44                   ['$28pred']
label 32:
    $34compare_op.2 = $phi32.0 <= threshold  ['$34compare_op.2', '$phi32.0', 'threshold']
    $bool38 = global(bool: <class 'bool'>)   ['$bool38']
    $38pred = call $bool38($34compare_op.2, func=$bool38, args=(Var($34compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.2', '$38pred', '$bool38']
    branch $38pred, 42, 52                   ['$38pred']
label 42:
    jump 48                                  []
label 44:
    jump 52                                  []
label 48:
    x0 = const(int, 0)                       ['x0']
    jump 52                                  []
label 52:
    $const54.1.2 = const(int, -1)            ['$const54.1.2']
    x1 = getitem(value=x, index=$const54.1.2, fn=<built-in function getitem>) ['$const54.1.2', 'x', 'x1']
    $64unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$64unary_negative.4', 'threshold']
    $72compare_op.6 = $64unary_negative.4 <= x1 ['$64unary_negative.4', '$72compare_op.6', 'x1']
    $bool76 = global(bool: <class 'bool'>)   ['$bool76']
    $76pred = call $bool76($72compare_op.6, func=$bool76, args=(Var($72compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$72compare_op.6', '$76pred', '$bool76']
    $phi80.0 = x1                            ['$phi80.0', 'x1']
    branch $76pred, 80, 92                   ['$76pred']
label 80:
    $82compare_op.2 = $phi80.0 <= threshold  ['$82compare_op.2', '$phi80.0', 'threshold']
    $bool86 = global(bool: <class 'bool'>)   ['$bool86']
    $86pred = call $bool86($82compare_op.2, func=$bool86, args=(Var($82compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$82compare_op.2', '$86pred', '$bool86']
    branch $86pred, 90, 100                  ['$86pred']
label 90:
    jump 96                                  []
label 92:
    jump 100                                 []
label 96:
    x1 = const(int, 0)                       ['x1']
    jump 100                                 []
label 100:
    $bool110 = global(bool: <class 'bool'>)  ['$bool110']
    $110pred = call $bool110(zero_pos, func=$bool110, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None) ['$110pred', '$bool110', 'zero_pos']
    branch $110pred, 114, 204                ['$110pred']
label 114:
    $114load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\y.stepanov\\PycharmProjects\\ai_transcribe\\venv\\Lib\\site-packages\\numpy\\__init__.py'>) ['$114load_global.0']
    $124load_attr.1 = getattr(value=$114load_global.0, attr=signbit) ['$114load_global.0', '$124load_attr.1']
    $148call.4 = call $124load_attr.1(x0, func=$124load_attr.1, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_attr.1', '$148call.4', 'x0']
    $156load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\y.stepanov\\PycharmProjects\\ai_transcribe\\venv\\Lib\\site-packages\\numpy\\__init__.py'>) ['$156load_global.5']
    $166load_attr.6 = getattr(value=$156load_global.5, attr=signbit) ['$156load_global.5', '$166load_attr.6']
    $190call.9 = call $166load_attr.6(x1, func=$166load_attr.6, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_attr.6', '$190call.9', 'x1']
    $198compare_op.10 = $148call.4 != $190call.9 ['$148call.4', '$190call.9', '$198compare_op.10']
    $202return_value.11 = cast(value=$198compare_op.10) ['$198compare_op.10', '$202return_value.11']
    return $202return_value.11               ['$202return_value.11']
label 204:
    $204load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\y.stepanov\\PycharmProjects\\ai_transcribe\\venv\\Lib\\site-packages\\numpy\\__init__.py'>) ['$204load_global.0']
    $214load_attr.1 = getattr(value=$204load_global.0, attr=sign) ['$204load_global.0', '$214load_attr.1']
    $238call.4 = call $214load_attr.1(x0, func=$214load_attr.1, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_attr.1', '$238call.4', 'x0']
    $246load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\y.stepanov\\PycharmProjects\\ai_transcribe\\venv\\Lib\\site-packages\\numpy\\__init__.py'>) ['$246load_global.5']
    $256load_attr.6 = getattr(value=$246load_global.5, attr=sign) ['$246load_global.5', '$256load_attr.6']
    $280call.9 = call $256load_attr.6(x1, func=$256load_attr.6, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$256load_attr.6', '$280call.9', 'x1']
    $288compare_op.10 = $238call.4 != $280call.9 ['$238call.4', '$280call.9', '$288compare_op.10']
    $292return_value.11 = cast(value=$288compare_op.10) ['$288compare_op.10', '$292return_value.11']
    return $292return_value.11               ['$292return_value.11']

2025-09-26 17:13:58,808 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1023)
           2	RESUME(arg=0, lineno=1023)
           4	LOAD_FAST(arg=0, lineno=1026)
           6	LOAD_CONST(arg=1, lineno=1026)
           8	BINARY_SUBSCR(arg=None, lineno=1026)
          12	LOAD_FAST(arg=0, lineno=1026)
          14	LOAD_CONST(arg=2, lineno=1026)
          16	BINARY_SUBSCR(arg=None, lineno=1026)
          20	COMPARE_OP(arg=132, lineno=1026)
          24	LOAD_FAST(arg=0, lineno=1026)
          26	LOAD_CONST(arg=1, lineno=1026)
          28	BINARY_SUBSCR(arg=None, lineno=1026)
          32	LOAD_FAST(arg=0, lineno=1026)
          34	LOAD_CONST(arg=3, lineno=1026)
          36	BINARY_SUBSCR(arg=None, lineno=1026)
          40	COMPARE_OP(arg=172, lineno=1026)
          44	BINARY_OP(arg=1, lineno=1026)
          48	RETURN_VALUE(arg=None, lineno=1026)
2025-09-26 17:13:58,808 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-09-26 17:13:58,809 - DEBUG - stack: []
2025-09-26 17:13:58,809 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-09-26 17:13:58,809 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1023)
2025-09-26 17:13:58,809 - DEBUG - stack []
2025-09-26 17:13:58,809 - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1023)
2025-09-26 17:13:58,809 - DEBUG - stack []
2025-09-26 17:13:58,809 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1026)
2025-09-26 17:13:58,809 - DEBUG - stack []
2025-09-26 17:13:58,810 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1026)
2025-09-26 17:13:58,810 - DEBUG - stack ['$x4.0']
2025-09-26 17:13:58,810 - DEBUG - dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1026)
2025-09-26 17:13:58,810 - DEBUG - stack ['$x4.0', '$const6.1.1']
2025-09-26 17:13:58,810 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1026)
2025-09-26 17:13:58,810 - DEBUG - stack ['$8binary_subscr.2']
2025-09-26 17:13:58,810 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1026)
2025-09-26 17:13:58,811 - DEBUG - stack ['$8binary_subscr.2', '$x12.3']
2025-09-26 17:13:58,811 - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=1026)
2025-09-26 17:13:58,811 - DEBUG - stack ['$8binary_subscr.2', '$x12.3', '$const14.4.2']
2025-09-26 17:13:58,811 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=132, lineno=1026)
2025-09-26 17:13:58,811 - DEBUG - stack ['$8binary_subscr.2', '$16binary_subscr.5']
2025-09-26 17:13:58,811 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=1026)
2025-09-26 17:13:58,811 - DEBUG - stack ['$20compare_op.6']
2025-09-26 17:13:58,811 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=1026)
2025-09-26 17:13:58,811 - DEBUG - stack ['$20compare_op.6', '$x24.7']
2025-09-26 17:13:58,811 - DEBUG - dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=1026)
2025-09-26 17:13:58,812 - DEBUG - stack ['$20compare_op.6', '$x24.7', '$const26.8.1']
2025-09-26 17:13:58,812 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=1026)
2025-09-26 17:13:58,812 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9']
2025-09-26 17:13:58,812 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=1026)
2025-09-26 17:13:58,812 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9', '$x32.10']
2025-09-26 17:13:58,812 - DEBUG - dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=1026)
2025-09-26 17:13:58,812 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9', '$x32.10', '$const34.11.3']
2025-09-26 17:13:58,812 - DEBUG - dispatch pc=40, inst=COMPARE_OP(arg=172, lineno=1026)
2025-09-26 17:13:58,812 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9', '$36binary_subscr.12']
2025-09-26 17:13:58,813 - DEBUG - dispatch pc=44, inst=BINARY_OP(arg=1, lineno=1026)
2025-09-26 17:13:58,813 - DEBUG - stack ['$20compare_op.6', '$40compare_op.13']
2025-09-26 17:13:58,813 - DEBUG - dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=1026)
2025-09-26 17:13:58,813 - DEBUG - stack ['$binop_and_44.14']
2025-09-26 17:13:58,813 - DEBUG - end state. edges=[]
2025-09-26 17:13:58,813 - DEBUG - -------------------------Prune PHIs-------------------------
2025-09-26 17:13:58,813 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-09-26 17:13:58,813 - DEBUG - defmap: {}
2025-09-26 17:13:58,813 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-09-26 17:13:58,814 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-09-26 17:13:58,814 - DEBUG - keep phismap: {}
2025-09-26 17:13:58,814 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-09-26 17:13:58,814 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-09-26 17:13:58,814 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1.1'}), (8, {'index': '$const6.1.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (12, {'res': '$x12.3'}), (14, {'res': '$const14.4.2'}), (16, {'index': '$const14.4.2', 'target': '$x12.3', 'res': '$16binary_subscr.5'}), (20, {'lhs': '$8binary_subscr.2', 'rhs': '$16binary_subscr.5', 'res': '$20compare_op.6'}), (24, {'res': '$x24.7'}), (26, {'res': '$const26.8.1'}), (28, {'index': '$const26.8.1', 'target': '$x24.7', 'res': '$28binary_subscr.9'}), (32, {'res': '$x32.10'}), (34, {'res': '$const34.11.3'}), (36, {'index': '$const34.11.3', 'target': '$x32.10', 'res': '$36binary_subscr.12'}), (40, {'lhs': '$28binary_subscr.9', 'rhs': '$36binary_subscr.12', 'res': '$40compare_op.13'}), (44, {'op': '&', 'lhs': '$20compare_op.6', 'rhs': '$40compare_op.13', 'res': '$binop_and_44.14'}), (48, {'retval': '$binop_and_44.14', 'castval': '$48return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-09-26 17:13:58,815 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const6.1.1 = const(int, 0)              ['$const6.1.1']
    $8binary_subscr.2 = getitem(value=x, index=$const6.1.1, fn=<built-in function getitem>) ['$8binary_subscr.2', '$const6.1.1', 'x']
    $const14.4.2 = const(int, -1)            ['$const14.4.2']
    $16binary_subscr.5 = getitem(value=x, index=$const14.4.2, fn=<built-in function getitem>) ['$16binary_subscr.5', '$const14.4.2', 'x']
    $20compare_op.6 = $8binary_subscr.2 > $16binary_subscr.5 ['$16binary_subscr.5', '$20compare_op.6', '$8binary_subscr.2']
    $const26.8.1 = const(int, 0)             ['$const26.8.1']
    $28binary_subscr.9 = getitem(value=x, index=$const26.8.1, fn=<built-in function getitem>) ['$28binary_subscr.9', '$const26.8.1', 'x']
    $const34.11.3 = const(int, 1)            ['$const34.11.3']
    $36binary_subscr.12 = getitem(value=x, index=$const34.11.3, fn=<built-in function getitem>) ['$36binary_subscr.12', '$const34.11.3', 'x']
    $40compare_op.13 = $28binary_subscr.9 >= $36binary_subscr.12 ['$28binary_subscr.9', '$36binary_subscr.12', '$40compare_op.13']
    $binop_and_44.14 = $20compare_op.6 & $40compare_op.13 ['$20compare_op.6', '$40compare_op.13', '$binop_and_44.14']
    $48return_value.15 = cast(value=$binop_and_44.14) ['$48return_value.15', '$binop_and_44.14']
    return $48return_value.15                ['$48return_value.15']

2025-09-26 17:13:58,816 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1029)
           2	RESUME(arg=0, lineno=1029)
           4	LOAD_FAST(arg=0, lineno=1032)
           6	LOAD_CONST(arg=1, lineno=1032)
           8	BINARY_SUBSCR(arg=None, lineno=1032)
          12	LOAD_FAST(arg=0, lineno=1032)
          14	LOAD_CONST(arg=2, lineno=1032)
          16	BINARY_SUBSCR(arg=None, lineno=1032)
          20	COMPARE_OP(arg=2, lineno=1032)
          24	LOAD_FAST(arg=0, lineno=1032)
          26	LOAD_CONST(arg=1, lineno=1032)
          28	BINARY_SUBSCR(arg=None, lineno=1032)
          32	LOAD_FAST(arg=0, lineno=1032)
          34	LOAD_CONST(arg=3, lineno=1032)
          36	BINARY_SUBSCR(arg=None, lineno=1032)
          40	COMPARE_OP(arg=42, lineno=1032)
          44	BINARY_OP(arg=1, lineno=1032)
          48	RETURN_VALUE(arg=None, lineno=1032)
2025-09-26 17:13:58,816 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-09-26 17:13:58,816 - DEBUG - stack: []
2025-09-26 17:13:58,817 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-09-26 17:13:58,817 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1029)
2025-09-26 17:13:58,817 - DEBUG - stack []
2025-09-26 17:13:58,817 - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1029)
2025-09-26 17:13:58,817 - DEBUG - stack []
2025-09-26 17:13:58,817 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1032)
2025-09-26 17:13:58,817 - DEBUG - stack []
2025-09-26 17:13:58,817 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1032)
2025-09-26 17:13:58,818 - DEBUG - stack ['$x4.0']
2025-09-26 17:13:58,818 - DEBUG - dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1032)
2025-09-26 17:13:58,818 - DEBUG - stack ['$x4.0', '$const6.1.1']
2025-09-26 17:13:58,818 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1032)
2025-09-26 17:13:58,818 - DEBUG - stack ['$8binary_subscr.2']
2025-09-26 17:13:58,818 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1032)
2025-09-26 17:13:58,818 - DEBUG - stack ['$8binary_subscr.2', '$x12.3']
2025-09-26 17:13:58,818 - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=1032)
2025-09-26 17:13:58,819 - DEBUG - stack ['$8binary_subscr.2', '$x12.3', '$const14.4.2']
2025-09-26 17:13:58,819 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=2, lineno=1032)
2025-09-26 17:13:58,819 - DEBUG - stack ['$8binary_subscr.2', '$16binary_subscr.5']
2025-09-26 17:13:58,819 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=1032)
2025-09-26 17:13:58,819 - DEBUG - stack ['$20compare_op.6']
2025-09-26 17:13:58,819 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=1032)
2025-09-26 17:13:58,819 - DEBUG - stack ['$20compare_op.6', '$x24.7']
2025-09-26 17:13:58,819 - DEBUG - dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=1032)
2025-09-26 17:13:58,819 - DEBUG - stack ['$20compare_op.6', '$x24.7', '$const26.8.1']
2025-09-26 17:13:58,820 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=1032)
2025-09-26 17:13:58,820 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9']
2025-09-26 17:13:58,820 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=1032)
2025-09-26 17:13:58,820 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9', '$x32.10']
2025-09-26 17:13:58,820 - DEBUG - dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=1032)
2025-09-26 17:13:58,820 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9', '$x32.10', '$const34.11.3']
2025-09-26 17:13:58,820 - DEBUG - dispatch pc=40, inst=COMPARE_OP(arg=42, lineno=1032)
2025-09-26 17:13:58,821 - DEBUG - stack ['$20compare_op.6', '$28binary_subscr.9', '$36binary_subscr.12']
2025-09-26 17:13:58,821 - DEBUG - dispatch pc=44, inst=BINARY_OP(arg=1, lineno=1032)
2025-09-26 17:13:58,821 - DEBUG - stack ['$20compare_op.6', '$40compare_op.13']
2025-09-26 17:13:58,821 - DEBUG - dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=1032)
2025-09-26 17:13:58,821 - DEBUG - stack ['$binop_and_44.14']
2025-09-26 17:13:58,821 - DEBUG - end state. edges=[]
2025-09-26 17:13:58,821 - DEBUG - -------------------------Prune PHIs-------------------------
2025-09-26 17:13:58,821 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-09-26 17:13:58,821 - DEBUG - defmap: {}
2025-09-26 17:13:58,822 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-09-26 17:13:58,822 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-09-26 17:13:58,822 - DEBUG - keep phismap: {}
2025-09-26 17:13:58,822 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-09-26 17:13:58,822 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-09-26 17:13:58,822 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1.1'}), (8, {'index': '$const6.1.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (12, {'res': '$x12.3'}), (14, {'res': '$const14.4.2'}), (16, {'index': '$const14.4.2', 'target': '$x12.3', 'res': '$16binary_subscr.5'}), (20, {'lhs': '$8binary_subscr.2', 'rhs': '$16binary_subscr.5', 'res': '$20compare_op.6'}), (24, {'res': '$x24.7'}), (26, {'res': '$const26.8.1'}), (28, {'index': '$const26.8.1', 'target': '$x24.7', 'res': '$28binary_subscr.9'}), (32, {'res': '$x32.10'}), (34, {'res': '$const34.11.3'}), (36, {'index': '$const34.11.3', 'target': '$x32.10', 'res': '$36binary_subscr.12'}), (40, {'lhs': '$28binary_subscr.9', 'rhs': '$36binary_subscr.12', 'res': '$40compare_op.13'}), (44, {'op': '&', 'lhs': '$20compare_op.6', 'rhs': '$40compare_op.13', 'res': '$binop_and_44.14'}), (48, {'retval': '$binop_and_44.14', 'castval': '$48return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-09-26 17:13:58,823 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const6.1.1 = const(int, 0)              ['$const6.1.1']
    $8binary_subscr.2 = getitem(value=x, index=$const6.1.1, fn=<built-in function getitem>) ['$8binary_subscr.2', '$const6.1.1', 'x']
    $const14.4.2 = const(int, -1)            ['$const14.4.2']
    $16binary_subscr.5 = getitem(value=x, index=$const14.4.2, fn=<built-in function getitem>) ['$16binary_subscr.5', '$const14.4.2', 'x']
    $20compare_op.6 = $8binary_subscr.2 < $16binary_subscr.5 ['$16binary_subscr.5', '$20compare_op.6', '$8binary_subscr.2']
    $const26.8.1 = const(int, 0)             ['$const26.8.1']
    $28binary_subscr.9 = getitem(value=x, index=$const26.8.1, fn=<built-in function getitem>) ['$28binary_subscr.9', '$const26.8.1', 'x']
    $const34.11.3 = const(int, 1)            ['$const34.11.3']
    $36binary_subscr.12 = getitem(value=x, index=$const34.11.3, fn=<built-in function getitem>) ['$36binary_subscr.12', '$const34.11.3', 'x']
    $40compare_op.13 = $28binary_subscr.9 <= $36binary_subscr.12 ['$28binary_subscr.9', '$36binary_subscr.12', '$40compare_op.13']
    $binop_and_44.14 = $20compare_op.6 & $40compare_op.13 ['$20compare_op.6', '$40compare_op.13', '$binop_and_44.14']
    $48return_value.15 = cast(value=$binop_and_44.14) ['$48return_value.15', '$binop_and_44.14']
    return $48return_value.15                ['$48return_value.15']

2025-09-26 17:13:59,155 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:13:59,155 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\children-voice.mp3
2025-09-26 17:13:59,155 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:00,727 - DEBUG - Loading FFmpeg6
2025-09-26 17:14:00,729 - DEBUG - Failed to load FFmpeg6 extension.
Traceback (most recent call last):
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
    ~~~~~~~~~^^^^^
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torch\_ops.py", line 1478, in load_library
    ctypes.CDLL(path)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\y.stepanov\AppData\Local\Programs\Python\Python313\Lib\ctypes\__init__.py", line 390, in __init__
    self._handle = _dlopen(self._name, mode)
                   ~~~~~~~^^^^^^^^^^^^^^^^^^
FileNotFoundError: Could not find module 'C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\lib\libtorio_ffmpeg6.pyd' (or one of its dependencies). Try using the full path with constructor syntax.
2025-09-26 17:14:00,731 - DEBUG - Loading FFmpeg5
2025-09-26 17:14:00,732 - DEBUG - Failed to load FFmpeg5 extension.
Traceback (most recent call last):
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
    ~~~~~~~~~^^^^^
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torch\_ops.py", line 1478, in load_library
    ctypes.CDLL(path)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\y.stepanov\AppData\Local\Programs\Python\Python313\Lib\ctypes\__init__.py", line 390, in __init__
    self._handle = _dlopen(self._name, mode)
                   ~~~~~~~^^^^^^^^^^^^^^^^^^
FileNotFoundError: Could not find module 'C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\lib\libtorio_ffmpeg5.pyd' (or one of its dependencies). Try using the full path with constructor syntax.
2025-09-26 17:14:00,733 - DEBUG - Loading FFmpeg4
2025-09-26 17:14:00,734 - DEBUG - Failed to load FFmpeg4 extension.
Traceback (most recent call last):
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
    ~~~~~~~~~^^^^^
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torch\_ops.py", line 1478, in load_library
    ctypes.CDLL(path)
    ~~~~~~~~~~~^^^^^^
  File "C:\Users\y.stepanov\AppData\Local\Programs\Python\Python313\Lib\ctypes\__init__.py", line 390, in __init__
    self._handle = _dlopen(self._name, mode)
                   ~~~~~~~^^^^^^^^^^^^^^^^^^
FileNotFoundError: Could not find module 'C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\lib\libtorio_ffmpeg4.pyd' (or one of its dependencies). Try using the full path with constructor syntax.
2025-09-26 17:14:00,736 - DEBUG - Loading FFmpeg
2025-09-26 17:14:00,736 - DEBUG - Failed to load FFmpeg extension.
Traceback (most recent call last):
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "C:\Users\y.stepanov\PycharmProjects\ai_transcribe\venv\Lib\site-packages\torio\_extension\utils.py", line 106, in _find_versionsed_ffmpeg_extension
    raise RuntimeError(f"FFmpeg{version} extension is not available.")
RuntimeError: FFmpeg extension is not available.
2025-09-26 17:14:00,819 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:00,819 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\children-voice.mp3
2025-09-26 17:14:01,533 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:01,533 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\children-voice.mp3
2025-09-26 17:14:01,592 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\children-voice_vocals.wav
2025-09-26 17:14:01,601 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:01,601 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:02,145 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\children-voice_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-3196ad08-712f-4a0a-9382-77394b3625bf', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:02,241 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:02,241 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-09-26 17:14:02,330 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000025DA5E841A0>
2025-09-26 17:14:02,331 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000025DA57A1BE0> server_hostname='api.openai.com' timeout=5.0
2025-09-26 17:14:02,580 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000025DA5B76850>
2025-09-26 17:14:02,580 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:02,580 - DEBUG - send_request_headers.complete
2025-09-26 17:14:02,580 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:02,582 - DEBUG - send_request_body.complete
2025-09-26 17:14:02,582 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:04,267 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:04 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1155'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1188'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_98a4f056c4f24d55aee5061590ba9634'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=TgX.OdFxP6g4TTcmM0YbfG0VfoIFHtemaiGCtCTpAAQ-1758896044-1.0.1.1-AoYrhy2geVJpkFP6I_VF6rtn9gj5Lcyg3eRCLG0LCm9bj6x6QA3Bju3wLCsWiWWNDUk1o75KJGRlS.zXDFpWIcKA.CggwxhG9kCbdmNiK98; path=/; expires=Fri, 26-Sep-25 14:44:04 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=8sMUb1xnrwTt1wJMEbkAXtn03BNOK9_SITelLWfeK1o-1758896044239-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535d8a5fd19e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:04,269 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:04,269 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:04,269 - DEBUG - receive_response_body.complete
2025-09-26 17:14:04,269 - DEBUG - response_closed.started
2025-09-26 17:14:04,269 - DEBUG - response_closed.complete
2025-09-26 17:14:04,270 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers([('date', 'Fri, 26 Sep 2025 14:14:04 GMT'), ('content-type', 'text/plain; charset=utf-8'), ('content-length', '1'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'yurisun'), ('openai-processing-ms', '1155'), ('openai-project', 'proj_Llb21yVk5b2whxj0ZTkY3iYI'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1188'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-reset-requests', '120ms'), ('x-request-id', 'req_98a4f056c4f24d55aee5061590ba9634'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=TgX.OdFxP6g4TTcmM0YbfG0VfoIFHtemaiGCtCTpAAQ-1758896044-1.0.1.1-AoYrhy2geVJpkFP6I_VF6rtn9gj5Lcyg3eRCLG0LCm9bj6x6QA3Bju3wLCsWiWWNDUk1o75KJGRlS.zXDFpWIcKA.CggwxhG9kCbdmNiK98; path=/; expires=Fri, 26-Sep-25 14:44:04 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=8sMUb1xnrwTt1wJMEbkAXtn03BNOK9_SITelLWfeK1o-1758896044239-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '98535d8a5fd19e92-TLL'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-26 17:14:04,270 - DEBUG - request_id: req_98a4f056c4f24d55aee5061590ba9634
2025-09-26 17:14:04,270 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:04,270 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:04,271 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:04,271 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: '' (длина: 0)
2025-09-26 17:14:04,271 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 2 - авто-язык
2025-09-26 17:14:04,272 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\children-voice_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-72e1b720-4961-4dbc-ab10-fb82445304ff', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:04,273 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:04,273 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:04,274 - DEBUG - send_request_headers.complete
2025-09-26 17:14:04,274 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:04,276 - DEBUG - send_request_body.complete
2025-09-26 17:14:04,276 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:05,468 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:05 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'693'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'832'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_08368654775c4238b6da1b328e07e5f1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535d94ec099e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:05,468 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:05,469 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:05,469 - DEBUG - receive_response_body.complete
2025-09-26 17:14:05,469 - DEBUG - response_closed.started
2025-09-26 17:14:05,469 - DEBUG - response_closed.complete
2025-09-26 17:14:05,469 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:05 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '693', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '832', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_08368654775c4238b6da1b328e07e5f1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535d94ec099e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:05,470 - DEBUG - request_id: req_08368654775c4238b6da1b328e07e5f1
2025-09-26 17:14:05,470 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:05,470 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:05,471 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:05,471 - DEBUG - ТРАНСКРИПЦИЯ: Результат 2: '' (длина: 0)
2025-09-26 17:14:05,471 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:14:05,472 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\children-voice_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-a090172f-7cac-4c3a-bde5-23efd698854c', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:05,473 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:05,473 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:05,473 - DEBUG - send_request_headers.complete
2025-09-26 17:14:05,473 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:05,475 - DEBUG - send_request_body.complete
2025-09-26 17:14:05,475 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:06,257 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:06 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'463'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'474'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_6f93113573b84b5bae1b1faabbdd7d90'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535d9c69ec9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:06,257 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:06,258 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:06,258 - DEBUG - receive_response_body.complete
2025-09-26 17:14:06,258 - DEBUG - response_closed.started
2025-09-26 17:14:06,258 - DEBUG - response_closed.complete
2025-09-26 17:14:06,258 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:06 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '463', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '474', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_6f93113573b84b5bae1b1faabbdd7d90', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535d9c69ec9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:06,259 - DEBUG - request_id: req_6f93113573b84b5bae1b1faabbdd7d90
2025-09-26 17:14:06,259 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:06,259 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:06,259 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:06,260 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: '' (длина: 0)
2025-09-26 17:14:06,260 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:14:06,260 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\children-voice_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-63fd3467-ca68-4ff5-9cc1-93795bd050ec', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:06,261 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:06,261 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:06,262 - DEBUG - send_request_headers.complete
2025-09-26 17:14:06,262 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:06,263 - DEBUG - send_request_body.complete
2025-09-26 17:14:06,263 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:07,303 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:07 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'726'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'736'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_8c4f83e4b1904b7399432a2fa1026eaa'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535da15f3a9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:07,303 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:07,304 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:07,304 - DEBUG - receive_response_body.complete
2025-09-26 17:14:07,304 - DEBUG - response_closed.started
2025-09-26 17:14:07,304 - DEBUG - response_closed.complete
2025-09-26 17:14:07,304 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:07 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '726', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '736', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_8c4f83e4b1904b7399432a2fa1026eaa', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535da15f3a9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:07,305 - DEBUG - request_id: req_8c4f83e4b1904b7399432a2fa1026eaa
2025-09-26 17:14:07,305 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:07,305 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:07,305 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:07,305 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: '' (длина: 0)
2025-09-26 17:14:07,305 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:07,306 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:07,306 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:07,524 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\engine-on-the-spot.mp3
2025-09-26 17:14:07,552 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:14:07,553 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\engine-on-the-spot.mp3
2025-09-26 17:14:07,553 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:07,553 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:07,553 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\engine-on-the-spot.mp3
2025-09-26 17:14:08,070 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:08,070 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\engine-on-the-spot.mp3
2025-09-26 17:14:08,315 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\engine-on-the-spot_vocals.wav
2025-09-26 17:14:08,327 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:08,327 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:08,337 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\engine-on-the-spot_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-943ae72e-61d9-4fc8-96ef-58f795a1cb71', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:08,339 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:08,339 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:08,339 - DEBUG - send_request_headers.complete
2025-09-26 17:14:08,339 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:08,343 - DEBUG - send_request_body.complete
2025-09-26 17:14:08,343 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:10,529 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:10 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'559'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'575'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_f8ad763470ef4a4d920cba3e5948796c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535dae5f7e9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:10,529 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:10,529 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:10,530 - DEBUG - receive_response_body.complete
2025-09-26 17:14:10,530 - DEBUG - response_closed.started
2025-09-26 17:14:10,530 - DEBUG - response_closed.complete
2025-09-26 17:14:10,530 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:10 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '559', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '575', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_f8ad763470ef4a4d920cba3e5948796c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535dae5f7e9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:10,531 - DEBUG - request_id: req_f8ad763470ef4a4d920cba3e5948796c
2025-09-26 17:14:10,531 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:10,531 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:10,531 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:10,532 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: '' (длина: 0)
2025-09-26 17:14:10,532 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 2 - авто-язык
2025-09-26 17:14:10,532 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\engine-on-the-spot_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-1677e207-8881-4388-a4e4-abb24a4325f2', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:10,533 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:10,533 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:10,533 - DEBUG - send_request_headers.complete
2025-09-26 17:14:10,534 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:10,537 - DEBUG - send_request_body.complete
2025-09-26 17:14:10,537 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:12,746 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:12 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'647'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'666'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_f39171d3db81415080707a02b809036c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535dbc0c0f9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:12,746 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:12,747 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:12,747 - DEBUG - receive_response_body.complete
2025-09-26 17:14:12,747 - DEBUG - response_closed.started
2025-09-26 17:14:12,747 - DEBUG - response_closed.complete
2025-09-26 17:14:12,748 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:12 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '647', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '666', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_f39171d3db81415080707a02b809036c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535dbc0c0f9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:12,748 - DEBUG - request_id: req_f39171d3db81415080707a02b809036c
2025-09-26 17:14:12,748 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:12,748 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:12,749 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:12,749 - DEBUG - ТРАНСКРИПЦИЯ: Результат 2: '' (длина: 0)
2025-09-26 17:14:12,749 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:14:12,750 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\engine-on-the-spot_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-57b1debd-f8df-45dd-a65c-2e5da6bc722e', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:12,751 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:12,751 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:12,751 - DEBUG - send_request_headers.complete
2025-09-26 17:14:12,751 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:12,755 - DEBUG - send_request_body.complete
2025-09-26 17:14:12,755 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:15,745 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:15 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1383'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1396'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_b05617a46c5a49da868ad31d84245c40'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535dc9ebe59e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:15,746 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:15,747 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:15,747 - DEBUG - receive_response_body.complete
2025-09-26 17:14:15,747 - DEBUG - response_closed.started
2025-09-26 17:14:15,747 - DEBUG - response_closed.complete
2025-09-26 17:14:15,747 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:15 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1383', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1396', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_b05617a46c5a49da868ad31d84245c40', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535dc9ebe59e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:15,748 - DEBUG - request_id: req_b05617a46c5a49da868ad31d84245c40
2025-09-26 17:14:15,748 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:15,748 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:15,749 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:15,749 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: '' (длина: 0)
2025-09-26 17:14:15,749 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:14:15,750 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\engine-on-the-spot_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-a0a6d618-800c-4dc2-b529-384796d04a69', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:15,751 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:15,751 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:15,751 - DEBUG - send_request_headers.complete
2025-09-26 17:14:15,751 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:15,755 - DEBUG - send_request_body.complete
2025-09-26 17:14:15,755 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:17,962 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:17 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'563'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'583'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_23b1cea91a7a46e9919a95cd2e4db08f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535ddcadbf9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:17,962 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:17,963 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:17,963 - DEBUG - receive_response_body.complete
2025-09-26 17:14:17,963 - DEBUG - response_closed.started
2025-09-26 17:14:17,963 - DEBUG - response_closed.complete
2025-09-26 17:14:17,963 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:17 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '563', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '583', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_23b1cea91a7a46e9919a95cd2e4db08f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535ddcadbf9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:17,964 - DEBUG - request_id: req_23b1cea91a7a46e9919a95cd2e4db08f
2025-09-26 17:14:17,964 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:17,964 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:17,964 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:17,965 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: '' (длина: 0)
2025-09-26 17:14:17,965 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:17,965 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:17,965 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:18,017 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\Incode - Know.mp3
2025-09-26 17:14:18,071 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:14:18,071 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\Incode - Know.mp3
2025-09-26 17:14:18,072 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:18,072 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:18,072 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\Incode - Know.mp3
2025-09-26 17:14:18,634 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:18,634 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\Incode - Know.mp3
2025-09-26 17:14:19,018 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\Incode - Know_vocals.wav
2025-09-26 17:14:19,029 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:19,029 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:19,037 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\Incode - Know_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-374acb27-6abb-42fa-b690-4af330a0dec6', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:19,038 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:19,038 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:19,038 - DEBUG - send_request_headers.complete
2025-09-26 17:14:19,038 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:19,043 - DEBUG - send_request_body.complete
2025-09-26 17:14:19,044 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:22,452 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:22 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'925'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'955'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_b192b775c38244449ce7d6695b2c01eb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535df139da9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:22,452 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:22,453 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:22,453 - DEBUG - receive_response_body.complete
2025-09-26 17:14:22,453 - DEBUG - response_closed.started
2025-09-26 17:14:22,453 - DEBUG - response_closed.complete
2025-09-26 17:14:22,454 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:22 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '925', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '955', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_b192b775c38244449ce7d6695b2c01eb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535df139da9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:22,454 - DEBUG - request_id: req_b192b775c38244449ce7d6695b2c01eb
2025-09-26 17:14:22,454 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:22,454 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:22,455 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:22,455 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: '' (длина: 0)
2025-09-26 17:14:22,455 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 2 - авто-язык
2025-09-26 17:14:22,456 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\Incode - Know_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-022775af-646f-4f3f-a203-3693b21b9d15', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:22,456 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:22,457 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:22,457 - DEBUG - send_request_headers.complete
2025-09-26 17:14:22,457 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:22,462 - DEBUG - send_request_body.complete
2025-09-26 17:14:22,462 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:27,801 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:27 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'2456'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2573'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_06020576b2c34bc2a216102bed7f7a50'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e069a479e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:27,801 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:27,801 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:27,802 - DEBUG - receive_response_body.complete
2025-09-26 17:14:27,802 - DEBUG - response_closed.started
2025-09-26 17:14:27,802 - DEBUG - response_closed.complete
2025-09-26 17:14:27,802 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:27 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '2456', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2573', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_06020576b2c34bc2a216102bed7f7a50', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e069a479e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:27,803 - DEBUG - request_id: req_06020576b2c34bc2a216102bed7f7a50
2025-09-26 17:14:27,803 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:27,803 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:27,803 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:27,804 - DEBUG - ТРАНСКРИПЦИЯ: Результат 2: '' (длина: 0)
2025-09-26 17:14:27,804 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:14:27,804 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\Incode - Know_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-84b3edb9-dd3a-4e97-b7ac-e30e722b7013', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:27,805 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:27,805 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:27,806 - DEBUG - send_request_headers.complete
2025-09-26 17:14:27,806 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:27,813 - DEBUG - send_request_body.complete
2025-09-26 17:14:27,813 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:30,730 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:30 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'457'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'469'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_d1d747b5192c429386d44c05e12ef9b9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e27f8b79e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:30,730 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:30,731 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:30,731 - DEBUG - receive_response_body.complete
2025-09-26 17:14:30,731 - DEBUG - response_closed.started
2025-09-26 17:14:30,731 - DEBUG - response_closed.complete
2025-09-26 17:14:30,731 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:30 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '457', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '469', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_d1d747b5192c429386d44c05e12ef9b9', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e27f8b79e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:30,732 - DEBUG - request_id: req_d1d747b5192c429386d44c05e12ef9b9
2025-09-26 17:14:30,732 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:30,732 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:30,733 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:30,733 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: '' (длина: 0)
2025-09-26 17:14:30,733 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:14:30,734 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\Incode - Know_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-bbe629e1-391c-4a4b-8b9c-20ecf05ca9f4', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:30,735 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:30,736 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:30,736 - DEBUG - send_request_headers.complete
2025-09-26 17:14:30,736 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:30,742 - DEBUG - send_request_body.complete
2025-09-26 17:14:30,742 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:33,888 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:33 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'787'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'801'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_0b877b92cd6846428c0893eb750ed6c6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e3a498a9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:33,889 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:33,889 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:33,890 - DEBUG - receive_response_body.complete
2025-09-26 17:14:33,890 - DEBUG - response_closed.started
2025-09-26 17:14:33,890 - DEBUG - response_closed.complete
2025-09-26 17:14:33,890 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:33 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '787', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '801', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_0b877b92cd6846428c0893eb750ed6c6', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e3a498a9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:33,891 - DEBUG - request_id: req_0b877b92cd6846428c0893eb750ed6c6
2025-09-26 17:14:33,891 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:33,891 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:33,891 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:33,892 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: '' (длина: 0)
2025-09-26 17:14:33,892 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:33,892 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:33,892 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:33,984 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\test_music.wav
2025-09-26 17:14:33,985 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:14:33,985 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\test_music.wav
2025-09-26 17:14:33,985 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:33,985 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:33,985 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\test_music.wav
2025-09-26 17:14:34,512 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:34,512 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\test_music.wav
2025-09-26 17:14:34,568 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\test_music_vocals.wav
2025-09-26 17:14:34,575 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:34,575 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:34,585 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_music_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-88be28ff-9bab-47aa-8f24-cce49583607f', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:34,586 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:34,586 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:34,587 - DEBUG - send_request_headers.complete
2025-09-26 17:14:34,587 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:34,588 - DEBUG - send_request_body.complete
2025-09-26 17:14:34,589 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:35,641 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:35 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'24'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'520'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'532'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_4e6a2b1c898c4a9eb89d7b911ee32a99'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e526c429e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:35,642 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:35,642 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:35,642 - DEBUG - receive_response_body.complete
2025-09-26 17:14:35,643 - DEBUG - response_closed.started
2025-09-26 17:14:35,643 - DEBUG - response_closed.complete
2025-09-26 17:14:35,643 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:35 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '24', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '520', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '532', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_4e6a2b1c898c4a9eb89d7b911ee32a99', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e526c429e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:35,643 - DEBUG - request_id: req_4e6a2b1c898c4a9eb89d7b911ee32a99
2025-09-26 17:14:35,643 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Плач ребенка'
2025-09-26 17:14:35,644 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:35,644 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Плач ребенка'
2025-09-26 17:14:35,645 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: 'Плач ребенка' (длина: 12)
2025-09-26 17:14:35,645 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:14:35,645 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_music_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-b7281166-2a3c-4650-ab50-77bd74c3e4f2', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:35,646 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:35,647 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:35,647 - DEBUG - send_request_headers.complete
2025-09-26 17:14:35,647 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:35,648 - DEBUG - send_request_body.complete
2025-09-26 17:14:35,649 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:36,531 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:36 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'348'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'363'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_16b03f27ea1e454ab5643b015bd9fafa'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e590f399e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:36,531 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:36,531 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:36,532 - DEBUG - receive_response_body.complete
2025-09-26 17:14:36,532 - DEBUG - response_closed.started
2025-09-26 17:14:36,532 - DEBUG - response_closed.complete
2025-09-26 17:14:36,532 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:36 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '348', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '363', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_16b03f27ea1e454ab5643b015bd9fafa', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e590f399e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:36,532 - DEBUG - request_id: req_16b03f27ea1e454ab5643b015bd9fafa
2025-09-26 17:14:36,533 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:36,533 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:36,533 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:36,533 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: '' (длина: 0)
2025-09-26 17:14:36,533 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:14:36,534 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_music_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-12069a3a-278d-4c41-886b-2a68589d9799', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:36,534 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:36,535 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:36,535 - DEBUG - send_request_headers.complete
2025-09-26 17:14:36,535 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:36,536 - DEBUG - send_request_body.complete
2025-09-26 17:14:36,536 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:39,912 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:39 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'11'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'2303'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2626'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_c4d007d9617d4e47b5205724f76cd8f3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e5e8eb09e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:39,913 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:39,913 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:39,913 - DEBUG - receive_response_body.complete
2025-09-26 17:14:39,914 - DEBUG - response_closed.started
2025-09-26 17:14:39,914 - DEBUG - response_closed.complete
2025-09-26 17:14:39,914 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:39 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '11', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '2303', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2626', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_c4d007d9617d4e47b5205724f76cd8f3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e5e8eb09e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:39,914 - DEBUG - request_id: req_c4d007d9617d4e47b5205724f76cd8f3
2025-09-26 17:14:39,914 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'I love it.'
2025-09-26 17:14:39,915 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:39,915 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'I love it.'
2025-09-26 17:14:39,915 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: 'I love it.' (длина: 10)
2025-09-26 17:14:39,915 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Плач ребенка'
2025-09-26 17:14:39,915 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:39,916 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Плач ребенка'
2025-09-26 17:14:39,918 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ce8ad5e5-e9af-4528-82ac-63aef78302a4', 'json_data': {'messages': [{'role': 'system', 'content': 'Ты — специализированная система для анализа аудиозаписей.\nТвоя единственная задача — классифицировать входной аудиофайл в одну из категорий: музыка, речь, шум.\n\nВАЖНО: Ты анализируешь РЕЗУЛЬТАТ ТРАНСКРИПЦИИ аудиофайла, а не сам аудиофайл. Это означает, что:\n- Если в аудио была музыка с вокалом, то в транскрипции будут слова песни\n- Если в аудио была речь, то в транскрипции будет связный текст\n- Если в аудио был шум, то в транскрипции будет мало слов или галлюцинации\n\nКатегории классификации:\n\nМузыка (music):\n- Это песня, музыкальная композиция с вокалом\n- Характерные признаки в транскрипции:\n  * Повторяющиеся фразы или слова (припев)\n  * Рифмы и ритмические паттерны\n  * Музыкальные звуки: "ла-ла-ла", "на-на-на", "о-о-о", "а-а-а"\n  * Эмоциональные восклицания: "Ауф!", "Ой!", "Ах!"\n  * Короткие фразы без логической связи\n  * Слова, которые звучат как песня, а не как обычная речь\n  * Повторяющиеся слова или фразы (припев песни)\n  * Ритмические паттерны в тексте\n\nРечь (speech):\n- Это обычная речь, разговор, диалог\n- Характерные признаки в транскрипции:\n  * Связные предложения с логической структурой\n  * Обычные слова и фразы\n  * Знаки препинания: точки, запятые, восклицательные знаки\n  * Логическая последовательность мыслей\n  * Отсутствие повторяющихся музыкальных паттернов\n  * Естественная речь без ритма\n\nШум (noise):\n- Это неречевые звуки, шум, техника, плач ребенка\n- Характерные признаки в транскрипции:\n  * Очень короткие или бессмысленные фрагменты\n  * Отсутствие связной речи\n  * Случайные слова или звуки\n  * Описания звуков: "[Music]", "[звук]", "[шум]"\n  * Повторяющиеся гласные: "ааа", "ууу", "ооо" (детский плач)\n  * Бессмысленные фразы: "Всем новичкам, всем новичкам"\n  * Короткие бессвязные слова\n\nПравила классификации:\n1. Если транскрипция содержит связную речь с логической структурой → speech\n2. Если транскрипция содержит повторяющиеся фразы, рифмы, музыкальные звуки → music\n3. Если транскрипция короткая, бессвязная или содержит описания звуков → noise\n4. При сомнениях между music и speech: если есть повторения или музыкальные звуки → music\n5. Детский плач (ааа, ууу, ооо) → noise\n6. Белый шум с бессмысленными словами → noise\n\nВАЖНЫЕ ПРИМЕРЫ:\n- "Скажи мне, не говори мне, что ты гонишь" → music (песня с повторениями)\n- "Привет, как дела?" → speech (обычная речь)\n- "Ааааааа" → noise (детский плач)\n- "Всем новичкам, всем новичкам" → noise (белый шум)\n- "Find me, find me, You can find" → music (песня с припевом)\n\nФормат ответа:\nОтвечай только в формате JSON, без лишнего текста:\n{\n  "classification": "music | speech | noise",\n  "confidence": 0.0-1.0,\n  "reasoning": "Краткое объяснение выбора: какие признаки были решающими"\n}\n\nОграничения:\n- Не добавляй ничего, кроме JSON\n- Не предлагай альтернативных категорий\n- Всегда возвращай одно значение в поле "classification"\n- Уровень уверенности (confidence) должен отражать баланс признаков:\n  * 0.9–1.0 → очень высокая уверенность\n  * 0.6–0.89 → умеренная уверенность\n  * <0.6 → низкая уверенность, признаки неоднозначны'}, {'role': 'user', 'content': 'Проанализируй следующий транскрипт аудио и классифицируй его:\n\nПлач ребенка'}], 'model': 'gpt-4o-mini', 'max_tokens': 200, 'temperature': 0.1}}
2025-09-26 17:14:39,920 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-26 17:14:39,920 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:39,921 - DEBUG - send_request_headers.complete
2025-09-26 17:14:39,921 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:39,921 - DEBUG - send_request_body.complete
2025-09-26 17:14:39,921 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:42,506 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'2313'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2331'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198685'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'394ms'), (b'x-request-id', b'req_2f520d299d2e49e9b2fb92c356c543e4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e73b9fb9e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:42,507 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-26 17:14:42,507 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:42,510 - DEBUG - receive_response_body.complete
2025-09-26 17:14:42,511 - DEBUG - response_closed.started
2025-09-26 17:14:42,511 - DEBUG - response_closed.complete
2025-09-26 17:14:42,511 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '2313', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2331', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '198685', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '394ms', 'x-request-id': 'req_2f520d299d2e49e9b2fb92c356c543e4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e73b9fb9e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:42,512 - DEBUG - request_id: req_2f520d299d2e49e9b2fb92c356c543e4
2025-09-26 17:14:42,520 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\test_noise.wav
2025-09-26 17:14:42,521 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:14:42,521 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\test_noise.wav
2025-09-26 17:14:42,521 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:42,521 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:42,521 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\test_noise.wav
2025-09-26 17:14:43,029 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:43,030 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\test_noise.wav
2025-09-26 17:14:43,058 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\test_noise_vocals.wav
2025-09-26 17:14:43,068 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:43,068 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:43,077 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_noise_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-b376ae68-b920-4266-a04b-4d1f85d18959', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:43,078 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:43,078 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:43,079 - DEBUG - send_request_headers.complete
2025-09-26 17:14:43,079 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:43,080 - DEBUG - send_request_body.complete
2025-09-26 17:14:43,080 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:43,769 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:43 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'363'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'377'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_5e7796c10c08407bb0434898b32cf354'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e877dda9e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:43,769 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:43,770 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:43,770 - DEBUG - receive_response_body.complete
2025-09-26 17:14:43,770 - DEBUG - response_closed.started
2025-09-26 17:14:43,770 - DEBUG - response_closed.complete
2025-09-26 17:14:43,771 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:43 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '363', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '377', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_5e7796c10c08407bb0434898b32cf354', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e877dda9e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:43,771 - DEBUG - request_id: req_5e7796c10c08407bb0434898b32cf354
2025-09-26 17:14:43,771 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:43,772 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:43,772 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:43,772 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: '' (длина: 0)
2025-09-26 17:14:43,772 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 2 - авто-язык
2025-09-26 17:14:43,773 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_noise_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-5c41557e-4860-4e99-bafc-c58b4c76fac5', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:43,774 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:43,774 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:43,774 - DEBUG - send_request_headers.complete
2025-09-26 17:14:43,774 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:43,775 - DEBUG - send_request_body.complete
2025-09-26 17:14:43,776 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:44,464 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:44 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Content-Length', b'1'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'374'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'385'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_9058a0f51a914f3cacd8cb518875ba10'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e8bc9d99e92-TLL'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:44,465 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:44,465 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:44,465 - DEBUG - receive_response_body.complete
2025-09-26 17:14:44,465 - DEBUG - response_closed.started
2025-09-26 17:14:44,466 - DEBUG - response_closed.complete
2025-09-26 17:14:44,466 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:44 GMT', 'content-type': 'text/plain; charset=utf-8', 'content-length': '1', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '374', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '385', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_9058a0f51a914f3cacd8cb518875ba10', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e8bc9d99e92-TLL', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:44,466 - DEBUG - request_id: req_9058a0f51a914f3cacd8cb518875ba10
2025-09-26 17:14:44,466 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: ''
2025-09-26 17:14:44,467 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:44,467 - DEBUG - ФИЛЬТРАЦИЯ: Пустой результат или промпт
2025-09-26 17:14:44,467 - DEBUG - ТРАНСКРИПЦИЯ: Результат 2: '' (длина: 0)
2025-09-26 17:14:44,467 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:14:44,468 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_noise_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-744c7958-567b-4b30-88d0-dbffdaecf8a1', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:44,469 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:44,469 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:44,469 - DEBUG - send_request_headers.complete
2025-09-26 17:14:44,470 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:44,471 - DEBUG - send_request_body.complete
2025-09-26 17:14:44,471 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:48,058 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:48 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'3268'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3285'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_a1b0bc7cf32c41d18eabb8fe577a4808'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535e902def9e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:48,058 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:48,058 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:48,059 - DEBUG - receive_response_body.complete
2025-09-26 17:14:48,059 - DEBUG - response_closed.started
2025-09-26 17:14:48,059 - DEBUG - response_closed.complete
2025-09-26 17:14:48,059 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:48 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '3268', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3285', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_a1b0bc7cf32c41d18eabb8fe577a4808', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535e902def9e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:48,059 - DEBUG - request_id: req_a1b0bc7cf32c41d18eabb8fe577a4808
2025-09-26 17:14:48,060 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Ah, t'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre

T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre'
2025-09-26 17:14:48,060 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:48,060 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Ah, t'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre

T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre'
2025-09-26 17:14:48,061 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: 'Ah, t'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre

T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre' (длина: 692)
2025-09-26 17:14:48,061 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Ah, t'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre

T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre'
2025-09-26 17:14:48,061 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:48,061 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Ah, t'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre

T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre
T'es mon soleil, mon tout, mon bouclier
Tu as su me donner ce que je n'attendais plus
T'es mon dernier espoir, mon ultime défi
T'es mon souffle, ma vie, ma raison de vivre'
2025-09-26 17:14:48,062 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\test_speech.mp3
2025-09-26 17:14:48,065 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:14:48,065 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\test_speech.mp3
2025-09-26 17:14:48,065 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:48,065 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:48,065 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\test_speech.mp3
2025-09-26 17:14:48,567 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:48,567 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\test_speech.mp3
2025-09-26 17:14:48,591 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\test_speech_vocals.wav
2025-09-26 17:14:48,599 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:48,599 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:48,606 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_speech_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-6d14a729-ab99-4144-b5b0-4f9f13887edd', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:48,607 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:48,607 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:48,608 - DEBUG - send_request_headers.complete
2025-09-26 17:14:48,608 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:48,609 - DEBUG - send_request_body.complete
2025-09-26 17:14:48,609 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:49,357 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:49 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'444'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'454'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_0d5e9b3a25cf49f0baa23af531ece077'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535eaa08079e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:49,358 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:49,358 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:49,359 - DEBUG - receive_response_body.complete
2025-09-26 17:14:49,359 - DEBUG - response_closed.started
2025-09-26 17:14:49,359 - DEBUG - response_closed.complete
2025-09-26 17:14:49,359 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:49 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '444', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '454', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_0d5e9b3a25cf49f0baa23af531ece077', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535eaa08079e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:49,360 - DEBUG - request_id: req_0d5e9b3a25cf49f0baa23af531ece077
2025-09-26 17:14:49,360 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:49,360 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:49,360 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:49,361 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: 'Привет, наконец-то это случилось.' (длина: 33)
2025-09-26 17:14:49,361 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:14:49,362 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_speech_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-8e9a052f-079e-4674-83a0-9725ae12274f', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:49,362 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:49,363 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:49,363 - DEBUG - send_request_headers.complete
2025-09-26 17:14:49,363 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:49,364 - DEBUG - send_request_body.complete
2025-09-26 17:14:49,364 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:50,005 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:49 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'326'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'340'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_62f209ee2d6544ef9a85411a34717066'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535eaebc379e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:50,005 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:50,006 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:50,006 - DEBUG - receive_response_body.complete
2025-09-26 17:14:50,006 - DEBUG - response_closed.started
2025-09-26 17:14:50,007 - DEBUG - response_closed.complete
2025-09-26 17:14:50,007 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:49 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '326', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '340', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_62f209ee2d6544ef9a85411a34717066', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535eaebc379e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:50,007 - DEBUG - request_id: req_62f209ee2d6544ef9a85411a34717066
2025-09-26 17:14:50,008 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:50,008 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:50,009 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:50,009 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: 'Привет, наконец-то это случилось.' (длина: 33)
2025-09-26 17:14:50,009 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:14:50,010 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\test_speech_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-24869a40-9759-4188-a838-ad528855e5a8', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:14:50,011 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:50,011 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:50,012 - DEBUG - send_request_headers.complete
2025-09-26 17:14:50,012 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:50,013 - DEBUG - send_request_body.complete
2025-09-26 17:14:50,013 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:50,753 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:50 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'434'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'445'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_b28658fe6e964c5e99ecb436c85a6af6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535eb2cf9c9e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:50,754 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:14:50,754 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:50,754 - DEBUG - receive_response_body.complete
2025-09-26 17:14:50,755 - DEBUG - response_closed.started
2025-09-26 17:14:50,755 - DEBUG - response_closed.complete
2025-09-26 17:14:50,755 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:50 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '434', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '445', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_b28658fe6e964c5e99ecb436c85a6af6', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535eb2cf9c9e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:50,756 - DEBUG - request_id: req_b28658fe6e964c5e99ecb436c85a6af6
2025-09-26 17:14:50,756 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:50,756 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:14:50,756 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:50,757 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: 'Привет, наконец-то это случилось.' (длина: 33)
2025-09-26 17:14:50,757 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:50,757 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:14:50,757 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Привет, наконец-то это случилось.'
2025-09-26 17:14:50,758 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0c3a1ecf-e744-407b-b237-14a039d1820c', 'json_data': {'messages': [{'role': 'system', 'content': 'Ты — специализированная система для анализа аудиозаписей.\nТвоя единственная задача — классифицировать входной аудиофайл в одну из категорий: музыка, речь, шум.\n\nВАЖНО: Ты анализируешь РЕЗУЛЬТАТ ТРАНСКРИПЦИИ аудиофайла, а не сам аудиофайл. Это означает, что:\n- Если в аудио была музыка с вокалом, то в транскрипции будут слова песни\n- Если в аудио была речь, то в транскрипции будет связный текст\n- Если в аудио был шум, то в транскрипции будет мало слов или галлюцинации\n\nКатегории классификации:\n\nМузыка (music):\n- Это песня, музыкальная композиция с вокалом\n- Характерные признаки в транскрипции:\n  * Повторяющиеся фразы или слова (припев)\n  * Рифмы и ритмические паттерны\n  * Музыкальные звуки: "ла-ла-ла", "на-на-на", "о-о-о", "а-а-а"\n  * Эмоциональные восклицания: "Ауф!", "Ой!", "Ах!"\n  * Короткие фразы без логической связи\n  * Слова, которые звучат как песня, а не как обычная речь\n  * Повторяющиеся слова или фразы (припев песни)\n  * Ритмические паттерны в тексте\n\nРечь (speech):\n- Это обычная речь, разговор, диалог\n- Характерные признаки в транскрипции:\n  * Связные предложения с логической структурой\n  * Обычные слова и фразы\n  * Знаки препинания: точки, запятые, восклицательные знаки\n  * Логическая последовательность мыслей\n  * Отсутствие повторяющихся музыкальных паттернов\n  * Естественная речь без ритма\n\nШум (noise):\n- Это неречевые звуки, шум, техника, плач ребенка\n- Характерные признаки в транскрипции:\n  * Очень короткие или бессмысленные фрагменты\n  * Отсутствие связной речи\n  * Случайные слова или звуки\n  * Описания звуков: "[Music]", "[звук]", "[шум]"\n  * Повторяющиеся гласные: "ааа", "ууу", "ооо" (детский плач)\n  * Бессмысленные фразы: "Всем новичкам, всем новичкам"\n  * Короткие бессвязные слова\n\nПравила классификации:\n1. Если транскрипция содержит связную речь с логической структурой → speech\n2. Если транскрипция содержит повторяющиеся фразы, рифмы, музыкальные звуки → music\n3. Если транскрипция короткая, бессвязная или содержит описания звуков → noise\n4. При сомнениях между music и speech: если есть повторения или музыкальные звуки → music\n5. Детский плач (ааа, ууу, ооо) → noise\n6. Белый шум с бессмысленными словами → noise\n\nВАЖНЫЕ ПРИМЕРЫ:\n- "Скажи мне, не говори мне, что ты гонишь" → music (песня с повторениями)\n- "Привет, как дела?" → speech (обычная речь)\n- "Ааааааа" → noise (детский плач)\n- "Всем новичкам, всем новичкам" → noise (белый шум)\n- "Find me, find me, You can find" → music (песня с припевом)\n\nФормат ответа:\nОтвечай только в формате JSON, без лишнего текста:\n{\n  "classification": "music | speech | noise",\n  "confidence": 0.0-1.0,\n  "reasoning": "Краткое объяснение выбора: какие признаки были решающими"\n}\n\nОграничения:\n- Не добавляй ничего, кроме JSON\n- Не предлагай альтернативных категорий\n- Всегда возвращай одно значение в поле "classification"\n- Уровень уверенности (confidence) должен отражать баланс признаков:\n  * 0.9–1.0 → очень высокая уверенность\n  * 0.6–0.89 → умеренная уверенность\n  * <0.6 → низкая уверенность, признаки неоднозначны'}, {'role': 'user', 'content': 'Проанализируй следующий транскрипт аудио и классифицируй его:\n\nПривет, наконец-то это случилось.'}], 'model': 'gpt-4o-mini', 'max_tokens': 200, 'temperature': 0.1}}
2025-09-26 17:14:50,760 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-26 17:14:50,760 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:50,760 - DEBUG - send_request_headers.complete
2025-09-26 17:14:50,760 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:50,761 - DEBUG - send_request_body.complete
2025-09-26 17:14:50,761 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:14:52,614 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:14:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1535'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1579'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198675'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'397ms'), (b'x-request-id', b'req_3281780d352043908b4fb01212031a7e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535eb77c799e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:14:52,614 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-26 17:14:52,615 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:14:52,617 - DEBUG - receive_response_body.complete
2025-09-26 17:14:52,618 - DEBUG - response_closed.started
2025-09-26 17:14:52,618 - DEBUG - response_closed.complete
2025-09-26 17:14:52,618 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:14:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1535', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1579', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '198675', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '397ms', 'x-request-id': 'req_3281780d352043908b4fb01212031a7e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535eb77c799e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:14:52,619 - DEBUG - request_id: req_3281780d352043908b4fb01212031a7e
2025-09-26 17:14:52,620 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\ЛЮБОВЬ.mp3
2025-09-26 17:14:52,737 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:14:52,737 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\ЛЮБОВЬ.mp3
2025-09-26 17:14:52,737 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:14:52,737 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:14:52,738 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\ЛЮБОВЬ.mp3
2025-09-26 17:14:53,364 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:14:53,364 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\ЛЮБОВЬ.mp3
2025-09-26 17:14:54,162 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\ЛЮБОВЬ_vocals.wav
2025-09-26 17:14:54,179 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:14:54,179 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:14:54,186 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\ЛЮБОВЬ_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-00809976-3e9c-4329-b1da-e4b8ff91dff7', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:14:54,187 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:14:54,187 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:14:54,188 - DEBUG - send_request_headers.complete
2025-09-26 17:14:54,188 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:14:54,198 - DEBUG - send_request_body.complete
2025-09-26 17:14:54,199 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:00,658 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:00 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1018'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1032'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_4c829a4a9e76498783877a2d687ca958'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535eccea929e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:00,658 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:00,658 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:00,659 - DEBUG - receive_response_body.complete
2025-09-26 17:15:00,659 - DEBUG - response_closed.started
2025-09-26 17:15:00,659 - DEBUG - response_closed.complete
2025-09-26 17:15:00,659 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:00 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1018', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1032', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_4c829a4a9e76498783877a2d687ca958', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535eccea929e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:00,660 - DEBUG - request_id: req_4c829a4a9e76498783877a2d687ca958
2025-09-26 17:15:00,660 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Мы снова играем с тобой в игру под названием любовь.'
2025-09-26 17:15:00,660 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:15:00,660 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Мы снова играем с тобой в игру под названием любовь.'
2025-09-26 17:15:00,661 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: 'Мы снова играем с тобой в игру под названием любовь.' (длина: 52)
2025-09-26 17:15:00,661 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:15:00,661 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\ЛЮБОВЬ_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-9baab07e-5092-4048-bc9d-c70f9104db23', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:15:00,662 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:15:00,662 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:00,663 - DEBUG - send_request_headers.complete
2025-09-26 17:15:00,663 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:00,673 - DEBUG - send_request_body.complete
2025-09-26 17:15:00,674 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:08,200 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:08 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1478'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1522'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_edff704165264814aed0b5c0ca53450f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535ef559099e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:08,200 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:08,200 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:08,201 - DEBUG - receive_response_body.complete
2025-09-26 17:15:08,201 - DEBUG - response_closed.started
2025-09-26 17:15:08,201 - DEBUG - response_closed.complete
2025-09-26 17:15:08,201 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:08 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1478', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1522', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_edff704165264814aed0b5c0ca53450f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535ef559099e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:08,202 - DEBUG - request_id: req_edff704165264814aed0b5c0ca53450f
2025-09-26 17:15:08,202 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Мы снова играем с собой в игру под названием любовь.'
2025-09-26 17:15:08,202 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:15:08,202 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Мы снова играем с собой в игру под названием любовь.'
2025-09-26 17:15:08,202 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: 'Мы снова играем с собой в игру под названием любовь.' (длина: 52)
2025-09-26 17:15:08,203 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:15:08,203 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\ЛЮБОВЬ_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-a335caf0-f457-4950-bd64-69c44ac894ea', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:15:08,204 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:15:08,205 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:08,205 - DEBUG - send_request_headers.complete
2025-09-26 17:15:08,205 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:08,215 - DEBUG - send_request_body.complete
2025-09-26 17:15:08,215 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:15,044 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:15 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1249'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1290'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_854b382bacdd4c2591977b39fe05af9a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535f247c239e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:15,044 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:15,045 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:15,045 - DEBUG - receive_response_body.complete
2025-09-26 17:15:15,046 - DEBUG - response_closed.started
2025-09-26 17:15:15,046 - DEBUG - response_closed.complete
2025-09-26 17:15:15,046 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:15 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1249', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1290', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_854b382bacdd4c2591977b39fe05af9a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535f247c239e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:15,046 - DEBUG - request_id: req_854b382bacdd4c2591977b39fe05af9a
2025-09-26 17:15:15,047 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Мы снова играем с тобой
В игру под названием любовь'
2025-09-26 17:15:15,047 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:15:15,047 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Мы снова играем с тобой
В игру под названием любовь'
2025-09-26 17:15:15,048 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: 'Мы снова играем с тобой
В игру под названием любовь' (длина: 51)
2025-09-26 17:15:15,048 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Мы снова играем с тобой в игру под названием любовь.'
2025-09-26 17:15:15,048 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:15:15,049 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Мы снова играем с тобой в игру под названием любовь.'
2025-09-26 17:15:15,050 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-87759ff3-e770-438f-a3d6-d35629609ac6', 'json_data': {'messages': [{'role': 'system', 'content': 'Ты — специализированная система для анализа аудиозаписей.\nТвоя единственная задача — классифицировать входной аудиофайл в одну из категорий: музыка, речь, шум.\n\nВАЖНО: Ты анализируешь РЕЗУЛЬТАТ ТРАНСКРИПЦИИ аудиофайла, а не сам аудиофайл. Это означает, что:\n- Если в аудио была музыка с вокалом, то в транскрипции будут слова песни\n- Если в аудио была речь, то в транскрипции будет связный текст\n- Если в аудио был шум, то в транскрипции будет мало слов или галлюцинации\n\nКатегории классификации:\n\nМузыка (music):\n- Это песня, музыкальная композиция с вокалом\n- Характерные признаки в транскрипции:\n  * Повторяющиеся фразы или слова (припев)\n  * Рифмы и ритмические паттерны\n  * Музыкальные звуки: "ла-ла-ла", "на-на-на", "о-о-о", "а-а-а"\n  * Эмоциональные восклицания: "Ауф!", "Ой!", "Ах!"\n  * Короткие фразы без логической связи\n  * Слова, которые звучат как песня, а не как обычная речь\n  * Повторяющиеся слова или фразы (припев песни)\n  * Ритмические паттерны в тексте\n\nРечь (speech):\n- Это обычная речь, разговор, диалог\n- Характерные признаки в транскрипции:\n  * Связные предложения с логической структурой\n  * Обычные слова и фразы\n  * Знаки препинания: точки, запятые, восклицательные знаки\n  * Логическая последовательность мыслей\n  * Отсутствие повторяющихся музыкальных паттернов\n  * Естественная речь без ритма\n\nШум (noise):\n- Это неречевые звуки, шум, техника, плач ребенка\n- Характерные признаки в транскрипции:\n  * Очень короткие или бессмысленные фрагменты\n  * Отсутствие связной речи\n  * Случайные слова или звуки\n  * Описания звуков: "[Music]", "[звук]", "[шум]"\n  * Повторяющиеся гласные: "ааа", "ууу", "ооо" (детский плач)\n  * Бессмысленные фразы: "Всем новичкам, всем новичкам"\n  * Короткие бессвязные слова\n\nПравила классификации:\n1. Если транскрипция содержит связную речь с логической структурой → speech\n2. Если транскрипция содержит повторяющиеся фразы, рифмы, музыкальные звуки → music\n3. Если транскрипция короткая, бессвязная или содержит описания звуков → noise\n4. При сомнениях между music и speech: если есть повторения или музыкальные звуки → music\n5. Детский плач (ааа, ууу, ооо) → noise\n6. Белый шум с бессмысленными словами → noise\n\nВАЖНЫЕ ПРИМЕРЫ:\n- "Скажи мне, не говори мне, что ты гонишь" → music (песня с повторениями)\n- "Привет, как дела?" → speech (обычная речь)\n- "Ааааааа" → noise (детский плач)\n- "Всем новичкам, всем новичкам" → noise (белый шум)\n- "Find me, find me, You can find" → music (песня с припевом)\n\nФормат ответа:\nОтвечай только в формате JSON, без лишнего текста:\n{\n  "classification": "music | speech | noise",\n  "confidence": 0.0-1.0,\n  "reasoning": "Краткое объяснение выбора: какие признаки были решающими"\n}\n\nОграничения:\n- Не добавляй ничего, кроме JSON\n- Не предлагай альтернативных категорий\n- Всегда возвращай одно значение в поле "classification"\n- Уровень уверенности (confidence) должен отражать баланс признаков:\n  * 0.9–1.0 → очень высокая уверенность\n  * 0.6–0.89 → умеренная уверенность\n  * <0.6 → низкая уверенность, признаки неоднозначны'}, {'role': 'user', 'content': 'Проанализируй следующий транскрипт аудио и классифицируй его:\n\nМы снова играем с тобой в игру под названием любовь.'}], 'model': 'gpt-4o-mini', 'max_tokens': 200, 'temperature': 0.1}}
2025-09-26 17:15:15,051 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-26 17:15:15,051 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:15,052 - DEBUG - send_request_headers.complete
2025-09-26 17:15:15,052 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:15,052 - DEBUG - send_request_body.complete
2025-09-26 17:15:15,052 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:17,015 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1667'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1709'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198667'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'399ms'), (b'x-request-id', b'req_e9b50ebd5a6444beb97f46db86d41fe4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535f4f4a679e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:17,016 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-26 17:15:17,016 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:17,030 - DEBUG - receive_response_body.complete
2025-09-26 17:15:17,031 - DEBUG - response_closed.started
2025-09-26 17:15:17,031 - DEBUG - response_closed.complete
2025-09-26 17:15:17,031 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1667', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1709', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '198667', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '399ms', 'x-request-id': 'req_e9b50ebd5a6444beb97f46db86d41fe4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535f4f4a679e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:17,031 - DEBUG - request_id: req_e9b50ebd5a6444beb97f46db86d41fe4
2025-09-26 17:15:17,033 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\ПОЗВОНИ МНЕ.mp3
2025-09-26 17:15:17,085 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:15:17,085 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\ПОЗВОНИ МНЕ.mp3
2025-09-26 17:15:17,085 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:15:17,086 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:15:17,086 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\ПОЗВОНИ МНЕ.mp3
2025-09-26 17:15:17,688 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:15:17,689 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\ПОЗВОНИ МНЕ.mp3
2025-09-26 17:15:18,147 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\ПОЗВОНИ МНЕ_vocals.wav
2025-09-26 17:15:18,157 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:15:18,158 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:15:18,166 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\ПОЗВОНИ МНЕ_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-75ae3902-96db-4360-8ab5-af2357a04840', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:15:18,167 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:15:18,167 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:18,167 - DEBUG - send_request_headers.complete
2025-09-26 17:15:18,168 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:18,173 - DEBUG - send_request_body.complete
2025-09-26 17:15:18,173 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:21,882 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:21 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1236'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1255'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_f66172d6718743beb35ae12ab82bb13a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535f62cf719e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:21,882 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:21,883 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:21,883 - DEBUG - receive_response_body.complete
2025-09-26 17:15:21,883 - DEBUG - response_closed.started
2025-09-26 17:15:21,883 - DEBUG - response_closed.complete
2025-09-26 17:15:21,884 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:21 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1236', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1255', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_f66172d6718743beb35ae12ab82bb13a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535f62cf719e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:21,884 - DEBUG - request_id: req_f66172d6718743beb35ae12ab82bb13a
2025-09-26 17:15:21,884 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Послани мне, не говори мне, что ты гонишь, снова мозг мне выносишь?'
2025-09-26 17:15:21,884 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:15:21,885 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Послани мне, не говори мне, что ты гонишь, снова мозг мне выносишь?'
2025-09-26 17:15:21,885 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: 'Послани мне, не говори мне, что ты гонишь, снова мозг мне выносишь?' (длина: 67)
2025-09-26 17:15:21,885 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 3 - музыкальный промпт
2025-09-26 17:15:21,886 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\ПОЗВОНИ МНЕ_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-f2bdcebc-7774-4fd1-80a3-11d8ffb14ca0', 'json_data': {'model': 'gpt-4o-transcribe', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:15:21,887 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:15:21,887 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:21,888 - DEBUG - send_request_headers.complete
2025-09-26 17:15:21,888 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:21,893 - DEBUG - send_request_body.complete
2025-09-26 17:15:21,893 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:25,320 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:25 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'929'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'940'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_2dd5486077c4431bad60123b994fb2bd'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535f7a0ddf9e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:25,320 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:25,320 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:25,321 - DEBUG - receive_response_body.complete
2025-09-26 17:15:25,321 - DEBUG - response_closed.started
2025-09-26 17:15:25,321 - DEBUG - response_closed.complete
2025-09-26 17:15:25,321 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:25 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '929', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '940', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_2dd5486077c4431bad60123b994fb2bd', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535f7a0ddf9e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:25,322 - DEBUG - request_id: req_2dd5486077c4431bad60123b994fb2bd
2025-09-26 17:15:25,322 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Посвони мне, не говори мне, что ты гонишь, снова мозг мне выносишь.'
2025-09-26 17:15:25,322 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:15:25,323 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Посвони мне, не говори мне, что ты гонишь, снова мозг мне выносишь.'
2025-09-26 17:15:25,323 - DEBUG - ТРАНСКРИПЦИЯ: Результат музыкального промпта: 'Посвони мне, не говори мне, что ты гонишь, снова мозг мне выносишь.' (длина: 67)
2025-09-26 17:15:25,323 - DEBUG - ТРАНСКРИПЦИЯ: Доп. шаг - английский язык с музыкальным промптом
2025-09-26 17:15:25,324 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\ПОЗВОНИ МНЕ_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-7cf2e52c-d45e-4297-a63c-202373fb68c1', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'en', 'prompt': 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.', 'response_format': 'text'}}
2025-09-26 17:15:25,324 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:15:25,325 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:25,325 - DEBUG - send_request_headers.complete
2025-09-26 17:15:25,325 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:25,330 - DEBUG - send_request_body.complete
2025-09-26 17:15:25,331 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:29,061 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:29 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'1247'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1262'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_6964db7e64a84d7f99b8b66749dc4814'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535f8f7a389e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:29,062 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:29,062 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:29,063 - DEBUG - receive_response_body.complete
2025-09-26 17:15:29,063 - DEBUG - response_closed.started
2025-09-26 17:15:29,063 - DEBUG - response_closed.complete
2025-09-26 17:15:29,064 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:29 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '1247', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1262', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_6964db7e64a84d7f99b8b66749dc4814', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535f8f7a389e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:29,064 - DEBUG - request_id: req_6964db7e64a84d7f99b8b66749dc4814
2025-09-26 17:15:29,065 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Посоли мне, не говори мне, че ты гонишь, снова мозг мне выносишь.'
2025-09-26 17:15:29,065 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Это музыкальная композиция с вокалом. Распознай ВСЕ слова песни от начала до конца. Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не интерпретируй, не сокращай. Внимательно слушай начало песни - там тоже есть слова. Если есть повторяющийся припев - распознай ВСЕ повторения полностью. Если это инструментальная музыка без слов - верни пустую строку. ВАЖНО: Распознай весь текст песни, включая все куплеты и припевы. Не останавливайся на первом фрагменте - слушай до конца.'
2025-09-26 17:15:29,065 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Посоли мне, не говори мне, че ты гонишь, снова мозг мне выносишь.'
2025-09-26 17:15:29,066 - DEBUG - ТРАНСКРИПЦИЯ: Результат англ. музыкального промпта: 'Посоли мне, не говори мне, че ты гонишь, снова мозг мне выносишь.' (длина: 65)
2025-09-26 17:15:29,066 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Послани мне, не говори мне, что ты гонишь, снова мозг мне выносишь?'
2025-09-26 17:15:29,066 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:15:29,066 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Послани мне, не говори мне, что ты гонишь, снова мозг мне выносишь?'
2025-09-26 17:15:29,067 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0d321408-4680-4447-b77a-85047539b115', 'json_data': {'messages': [{'role': 'system', 'content': 'Ты — специализированная система для анализа аудиозаписей.\nТвоя единственная задача — классифицировать входной аудиофайл в одну из категорий: музыка, речь, шум.\n\nВАЖНО: Ты анализируешь РЕЗУЛЬТАТ ТРАНСКРИПЦИИ аудиофайла, а не сам аудиофайл. Это означает, что:\n- Если в аудио была музыка с вокалом, то в транскрипции будут слова песни\n- Если в аудио была речь, то в транскрипции будет связный текст\n- Если в аудио был шум, то в транскрипции будет мало слов или галлюцинации\n\nКатегории классификации:\n\nМузыка (music):\n- Это песня, музыкальная композиция с вокалом\n- Характерные признаки в транскрипции:\n  * Повторяющиеся фразы или слова (припев)\n  * Рифмы и ритмические паттерны\n  * Музыкальные звуки: "ла-ла-ла", "на-на-на", "о-о-о", "а-а-а"\n  * Эмоциональные восклицания: "Ауф!", "Ой!", "Ах!"\n  * Короткие фразы без логической связи\n  * Слова, которые звучат как песня, а не как обычная речь\n  * Повторяющиеся слова или фразы (припев песни)\n  * Ритмические паттерны в тексте\n\nРечь (speech):\n- Это обычная речь, разговор, диалог\n- Характерные признаки в транскрипции:\n  * Связные предложения с логической структурой\n  * Обычные слова и фразы\n  * Знаки препинания: точки, запятые, восклицательные знаки\n  * Логическая последовательность мыслей\n  * Отсутствие повторяющихся музыкальных паттернов\n  * Естественная речь без ритма\n\nШум (noise):\n- Это неречевые звуки, шум, техника, плач ребенка\n- Характерные признаки в транскрипции:\n  * Очень короткие или бессмысленные фрагменты\n  * Отсутствие связной речи\n  * Случайные слова или звуки\n  * Описания звуков: "[Music]", "[звук]", "[шум]"\n  * Повторяющиеся гласные: "ааа", "ууу", "ооо" (детский плач)\n  * Бессмысленные фразы: "Всем новичкам, всем новичкам"\n  * Короткие бессвязные слова\n\nПравила классификации:\n1. Если транскрипция содержит связную речь с логической структурой → speech\n2. Если транскрипция содержит повторяющиеся фразы, рифмы, музыкальные звуки → music\n3. Если транскрипция короткая, бессвязная или содержит описания звуков → noise\n4. При сомнениях между music и speech: если есть повторения или музыкальные звуки → music\n5. Детский плач (ааа, ууу, ооо) → noise\n6. Белый шум с бессмысленными словами → noise\n\nВАЖНЫЕ ПРИМЕРЫ:\n- "Скажи мне, не говори мне, что ты гонишь" → music (песня с повторениями)\n- "Привет, как дела?" → speech (обычная речь)\n- "Ааааааа" → noise (детский плач)\n- "Всем новичкам, всем новичкам" → noise (белый шум)\n- "Find me, find me, You can find" → music (песня с припевом)\n\nФормат ответа:\nОтвечай только в формате JSON, без лишнего текста:\n{\n  "classification": "music | speech | noise",\n  "confidence": 0.0-1.0,\n  "reasoning": "Краткое объяснение выбора: какие признаки были решающими"\n}\n\nОграничения:\n- Не добавляй ничего, кроме JSON\n- Не предлагай альтернативных категорий\n- Всегда возвращай одно значение в поле "classification"\n- Уровень уверенности (confidence) должен отражать баланс признаков:\n  * 0.9–1.0 → очень высокая уверенность\n  * 0.6–0.89 → умеренная уверенность\n  * <0.6 → низкая уверенность, признаки неоднозначны'}, {'role': 'user', 'content': 'Проанализируй следующий транскрипт аудио и классифицируй его:\n\nПослани мне, не говори мне, что ты гонишь, снова мозг мне выносишь?'}], 'model': 'gpt-4o-mini', 'max_tokens': 200, 'temperature': 0.1}}
2025-09-26 17:15:29,069 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-26 17:15:29,069 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:29,069 - DEBUG - send_request_headers.complete
2025-09-26 17:15:29,069 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:29,070 - DEBUG - send_request_body.complete
2025-09-26 17:15:29,070 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:31,668 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'2300'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2335'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198661'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'401ms'), (b'x-request-id', b'req_eeb305e7b7ab4912a74a297c20970234'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535fa6eb489e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:31,668 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-26 17:15:31,669 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:31,678 - DEBUG - receive_response_body.complete
2025-09-26 17:15:31,678 - DEBUG - response_closed.started
2025-09-26 17:15:31,678 - DEBUG - response_closed.complete
2025-09-26 17:15:31,679 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '2300', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2335', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '198661', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '401ms', 'x-request-id': 'req_eeb305e7b7ab4912a74a297c20970234', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535fa6eb489e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:31,679 - DEBUG - request_id: req_eeb305e7b7ab4912a74a297c20970234
2025-09-26 17:15:31,681 - INFO - ТРАНСКРИПЦИЯ: Начало анализа файла: examples\РИНГТОН.mp3
2025-09-26 17:15:31,755 - DEBUG - УЛУЧШЕНИЕ АУДИО: Параметры Demucs: {'model': 'htdemucs', 'shifts': 4, 'overlap': 0.4, 'jobs': 4}
2025-09-26 17:15:31,755 - DEBUG - УЛУЧШЕНИЕ АУДИО: Попытка улучшения файла (после предочистки): examples\РИНГТОН.mp3
2025-09-26 17:15:31,755 - DEBUG - УЛУЧШЕНИЕ АУДИО: Импортируем Demucs...
2025-09-26 17:15:31,756 - DEBUG - УЛУЧШЕНИЕ АУДИО: Demucs успешно импортирован
2025-09-26 17:15:31,756 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем Demucs для разделения вокала: examples\РИНГТОН.mp3
2025-09-26 17:15:32,325 - WARNING - УЛУЧШЕНИЕ АУДИО: Ошибка обработки с Demucs: Torch not compiled with CUDA enabled
2025-09-26 17:15:32,325 - DEBUG - УЛУЧШЕНИЕ АУДИО: Используем librosa для выделения вокала: examples\РИНГТОН.mp3
2025-09-26 17:15:32,842 - DEBUG - УЛУЧШЕНИЕ АУДИО: Создан файл с выделенным вокалом: examples\РИНГТОН_vocals.wav
2025-09-26 17:15:32,855 - DEBUG - ТРАНСКРИПЦИЯ: Использован промпт: Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.
2025-09-26 17:15:32,855 - DEBUG - ТРАНСКРИПЦИЯ: Попытка 1 - основной язык: ru
2025-09-26 17:15:32,863 - DEBUG - Request options: {'method': 'post', 'url': '/audio/transcriptions', 'headers': {'Content-Type': 'multipart/form-data'}, 'files': [('file', SerializationIterator(index=0, iterator=SerializationIterator(index=0, iterator=<_io.BufferedReader name='examples\\РИНГТОН_vocals.wav'>)))], 'idempotency_key': 'stainless-python-retry-f762ea9c-28cf-42b5-a058-48ebae5ca16c', 'json_data': {'model': 'gpt-4o-transcribe', 'language': 'ru', 'prompt': 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.', 'response_format': 'text'}}
2025-09-26 17:15:32,864 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/audio/transcriptions
2025-09-26 17:15:32,864 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:32,864 - DEBUG - send_request_headers.complete
2025-09-26 17:15:32,864 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:32,872 - DEBUG - send_request_body.complete
2025-09-26 17:15:32,872 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:39,294 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:39 GMT'), (b'Content-Type', b'text/plain; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'2317'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2333'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-request-id', b'req_7f85d087f1864382bcb2ef6f97009788'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535fbe9aa49e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:39,294 - INFO - HTTP Request: POST https://api.openai.com/v1/audio/transcriptions "HTTP/1.1 200 OK"
2025-09-26 17:15:39,295 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:39,295 - DEBUG - receive_response_body.complete
2025-09-26 17:15:39,295 - DEBUG - response_closed.started
2025-09-26 17:15:39,295 - DEBUG - response_closed.complete
2025-09-26 17:15:39,296 - DEBUG - HTTP Response: POST https://api.openai.com/v1/audio/transcriptions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:39 GMT', 'content-type': 'text/plain; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '2317', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2333', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-reset-requests': '120ms', 'x-request-id': 'req_7f85d087f1864382bcb2ef6f97009788', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535fbe9aa49e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:39,296 - DEBUG - request_id: req_7f85d087f1864382bcb2ef6f97009788
2025-09-26 17:15:39,296 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Find me, find me
You can find me, find me
Find me, find me
You can find me
Tearing up downtown with the high beams
No need for a view when they can catch you
I never look back, never look
Look like I want you, I'm so innocent
Kissing your tattoos, sweet like cinnamon
No need for a view when they can catch you'
2025-09-26 17:15:39,297 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:15:39,297 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Find me, find me
You can find me, find me
Find me, find me
You can find me
Tearing up downtown with the high beams
No need for a view when they can catch you
I never look back, never look
Look like I want you, I'm so innocent
Kissing your tattoos, sweet like cinnamon
No need for a view when they can catch you'
2025-09-26 17:15:39,297 - DEBUG - ТРАНСКРИПЦИЯ: Результат 1: 'Find me, find me
You can find me, find me
Find me, find me
You can find me
Tearing up downtown with the high beams
No need for a view when they can catch you
I never look back, never look
Look like I want you, I'm so innocent
Kissing your tattoos, sweet like cinnamon
No need for a view when they can catch you' (длина: 310)
2025-09-26 17:15:39,298 - DEBUG - ФИЛЬТРАЦИЯ: Входной текст: 'Find me, find me
You can find me, find me
Find me, find me
You can find me
Tearing up downtown with the high beams
No need for a view when they can catch you
I never look back, never look
Look like I want you, I'm so innocent
Kissing your tattoos, sweet like cinnamon
No need for a view when they can catch you'
2025-09-26 17:15:39,298 - DEBUG - ФИЛЬТРАЦИЯ: Промпт: 'Дай дословную ПОЛНУЮ транскрипцию без перевода и перефразирования. Сохраняй язык оригинала, не смешивай языки. Не интерпретируй смысл, не сокращай, не исправляй. Если часть неразборчива — оставь как есть или пропусти без домыслов. ВНИМАНИЕ: Если это музыка с повторяющимся припевом - распознай ВСЕ повторения. Если это плач ребенка или нечеловеческие звуки - НЕ придумывай слова, верни пустую строку.'
2025-09-26 17:15:39,298 - DEBUG - ФИЛЬТРАЦИЯ: Текст прошел фильтрацию: 'Find me, find me
You can find me, find me
Find me, find me
You can find me
Tearing up downtown with the high beams
No need for a view when they can catch you
I never look back, never look
Look like I want you, I'm so innocent
Kissing your tattoos, sweet like cinnamon
No need for a view when they can catch you'
2025-09-26 17:15:39,299 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d7a43bc6-8dd6-4788-bad8-1da152b893a7', 'json_data': {'messages': [{'role': 'system', 'content': 'Ты — специализированная система для анализа аудиозаписей.\nТвоя единственная задача — классифицировать входной аудиофайл в одну из категорий: музыка, речь, шум.\n\nВАЖНО: Ты анализируешь РЕЗУЛЬТАТ ТРАНСКРИПЦИИ аудиофайла, а не сам аудиофайл. Это означает, что:\n- Если в аудио была музыка с вокалом, то в транскрипции будут слова песни\n- Если в аудио была речь, то в транскрипции будет связный текст\n- Если в аудио был шум, то в транскрипции будет мало слов или галлюцинации\n\nКатегории классификации:\n\nМузыка (music):\n- Это песня, музыкальная композиция с вокалом\n- Характерные признаки в транскрипции:\n  * Повторяющиеся фразы или слова (припев)\n  * Рифмы и ритмические паттерны\n  * Музыкальные звуки: "ла-ла-ла", "на-на-на", "о-о-о", "а-а-а"\n  * Эмоциональные восклицания: "Ауф!", "Ой!", "Ах!"\n  * Короткие фразы без логической связи\n  * Слова, которые звучат как песня, а не как обычная речь\n  * Повторяющиеся слова или фразы (припев песни)\n  * Ритмические паттерны в тексте\n\nРечь (speech):\n- Это обычная речь, разговор, диалог\n- Характерные признаки в транскрипции:\n  * Связные предложения с логической структурой\n  * Обычные слова и фразы\n  * Знаки препинания: точки, запятые, восклицательные знаки\n  * Логическая последовательность мыслей\n  * Отсутствие повторяющихся музыкальных паттернов\n  * Естественная речь без ритма\n\nШум (noise):\n- Это неречевые звуки, шум, техника, плач ребенка\n- Характерные признаки в транскрипции:\n  * Очень короткие или бессмысленные фрагменты\n  * Отсутствие связной речи\n  * Случайные слова или звуки\n  * Описания звуков: "[Music]", "[звук]", "[шум]"\n  * Повторяющиеся гласные: "ааа", "ууу", "ооо" (детский плач)\n  * Бессмысленные фразы: "Всем новичкам, всем новичкам"\n  * Короткие бессвязные слова\n\nПравила классификации:\n1. Если транскрипция содержит связную речь с логической структурой → speech\n2. Если транскрипция содержит повторяющиеся фразы, рифмы, музыкальные звуки → music\n3. Если транскрипция короткая, бессвязная или содержит описания звуков → noise\n4. При сомнениях между music и speech: если есть повторения или музыкальные звуки → music\n5. Детский плач (ааа, ууу, ооо) → noise\n6. Белый шум с бессмысленными словами → noise\n\nВАЖНЫЕ ПРИМЕРЫ:\n- "Скажи мне, не говори мне, что ты гонишь" → music (песня с повторениями)\n- "Привет, как дела?" → speech (обычная речь)\n- "Ааааааа" → noise (детский плач)\n- "Всем новичкам, всем новичкам" → noise (белый шум)\n- "Find me, find me, You can find" → music (песня с припевом)\n\nФормат ответа:\nОтвечай только в формате JSON, без лишнего текста:\n{\n  "classification": "music | speech | noise",\n  "confidence": 0.0-1.0,\n  "reasoning": "Краткое объяснение выбора: какие признаки были решающими"\n}\n\nОграничения:\n- Не добавляй ничего, кроме JSON\n- Не предлагай альтернативных категорий\n- Всегда возвращай одно значение в поле "classification"\n- Уровень уверенности (confidence) должен отражать баланс признаков:\n  * 0.9–1.0 → очень высокая уверенность\n  * 0.6–0.89 → умеренная уверенность\n  * <0.6 → низкая уверенность, признаки неоднозначны'}, {'role': 'user', 'content': "Проанализируй следующий транскрипт аудио и классифицируй его:\n\nFind me, find me\nYou can find me, find me\nFind me, find me\nYou can find me\nTearing up downtown with the high beams\nNo need for a view when they can catch you\nI never look back, never look\nLook like I want you, I'm so innocent\nKissing your tattoos, sweet like cinnamon\nNo need for a view when they can catch you"}], 'model': 'gpt-4o-mini', 'max_tokens': 200, 'temperature': 0.1}}
2025-09-26 17:15:39,301 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-26 17:15:39,301 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-26 17:15:39,301 - DEBUG - send_request_headers.complete
2025-09-26 17:15:39,302 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-26 17:15:39,302 - DEBUG - send_request_body.complete
2025-09-26 17:15:39,302 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-26 17:15:42,214 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Sep 2025 14:15:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'yurisun'), (b'openai-processing-ms', b'2640'), (b'openai-project', b'proj_Llb21yVk5b2whxj0ZTkY3iYI'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2654'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198612'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'416ms'), (b'x-request-id', b'req_d29f1c5ad37a46bfb32c17bf8807c4f3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'98535fe6ded59e92-TLL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-26 17:15:42,215 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-26 17:15:42,215 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-26 17:15:42,217 - DEBUG - receive_response_body.complete
2025-09-26 17:15:42,217 - DEBUG - response_closed.started
2025-09-26 17:15:42,217 - DEBUG - response_closed.complete
2025-09-26 17:15:42,217 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Fri, 26 Sep 2025 14:15:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'yurisun', 'openai-processing-ms': '2640', 'openai-project': 'proj_Llb21yVk5b2whxj0ZTkY3iYI', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2654', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '198612', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '416ms', 'x-request-id': 'req_d29f1c5ad37a46bfb32c17bf8807c4f3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '98535fe6ded59e92-TLL', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-26 17:15:42,217 - DEBUG - request_id: req_d29f1c5ad37a46bfb32c17bf8807c4f3
