#!/usr/bin/env python3
"""
–ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4o-transcribe –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º.
"""

import argparse
import os
import sys
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Union

import openai
from dotenv import load_dotenv

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    from pydub import AudioSegment
except ImportError:
    AudioSegment = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class AudioAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∞—É–¥–∏–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
    """
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    SUPPORTED_FORMATS = {'.mp3', '.wav', '.m4a', '.flac'}
    
    def __init__(self, primary_language: str = "ru", secondary_language: str = "en") -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—É–¥–∏–æ.
        
        Args:
            primary_language: –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru)
            secondary_language: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: en)
            
        Raises:
            ValueError: –ï—Å–ª–∏ OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.api_key = os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        openai.api_key = self.api_key
        self.primary_language = primary_language
        self.secondary_language = secondary_language
    
    def list_audio_files(self, folder: str) -> List[Path]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
        
        Args:
            folder: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º
            
        Raises:
            FileNotFoundError: –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        folder_path = Path(folder)
        if not folder_path.exists():
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
        
        audio_files = []
        for file_path in folder_path.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in self.SUPPORTED_FORMATS:
                audio_files.append(file_path)
        
        return sorted(audio_files)
    
    def choose_file(self, files: List[Path]) -> Optional[Path]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
        
        Args:
            files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
        """
        if not files:
            print("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã:")
        for i, file_path in enumerate(files, 1):
            file_size = file_path.stat().st_size / (1024 * 1024)
            print(f"  {i}. {file_path.name} ({file_size:.1f} –ú–ë)")
        
        print(f"  {len(files) + 1}. ‚ùå –û—Ç–º–µ–Ω–∞")
        
        while True:
            try:
                choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (1-{len(files)}) –∏–ª–∏ {len(files) + 1} –¥–ª—è –æ—Ç–º–µ–Ω—ã: ")
                choice_num = int(choice)
                
                if choice_num == len(files) + 1:
                    return None
                elif 1 <= choice_num <= len(files):
                    return files[choice_num - 1]
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(files) + 1}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                return None
    
    def convert_audio_format(self, file_path: Path) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ MP3 —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            –ü—É—Ç—å –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–º—É –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        """
        if AudioSegment is None:
            return str(file_path)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            audio = AudioSegment.from_file(str(file_path))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                audio.export(temp_file.name, format='mp3')
                return temp_file.name
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return str(file_path)
    
    def _get_transcription_prompt(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        return (
            "–î–∞–π –¥–æ—Å–ª–æ–≤–Ω—É—é –ü–û–õ–ù–£–Æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –Ω–µ —Å–º–µ—à–∏–≤–∞–π —è–∑—ã–∫–∏. "
            "–ù–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Å–º—ã—Å–ª, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π, –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–π. "
            "–ï—Å–ª–∏ —á–∞—Å—Ç—å –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–∞ ‚Äî –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤."
        )
    
    def _get_music_transcription_prompt(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        return (
            "–≠—Ç–æ —Ä—É—Å—Å–∫–∞—è –ø–µ—Å–Ω—è —Å –≤–æ–∫–∞–ª–æ–º. –†–∞—Å–ø–æ–∑–Ω–∞–π –í–°–ï —Å–ª–æ–≤–∞ –ø–µ—Å–Ω–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞. "
            "–î–∞–π –¥–æ—Å–ª–æ–≤–Ω—É—é –ü–û–õ–ù–£–Æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π. "
            "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π –Ω–∞—á–∞–ª–æ –ø–µ—Å–Ω–∏ - —Ç–∞–º —Ç–æ–∂–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞."
        )
    
    def transcribe_audio(self, file_path: str, debug: bool = False) -> str:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            strict_prompt = self._get_transcription_prompt()
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫
            result = self._transcribe_with_language(file_path, self.primary_language, strict_prompt, debug)
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫ (–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–æ—Ç–∫–∏–π)
            if len(result) < 10:
                result_alt = self._transcribe_with_language(file_path, self.secondary_language, strict_prompt, debug)
                if len(result_alt) > len(result):
                    result = result_alt
            
            # –ü–æ–ø—ã—Ç–∫–∞ 3: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–æ—Ç–∫–∏–π)
            if len(result) < 10:
                result_auto = self._transcribe_with_language(file_path, None, strict_prompt, debug)
                if len(result_auto) > len(result):
                    result = result_auto
            
            # –ü–æ–ø—ã—Ç–∫–∞ 4: –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–æ—Ç–∫–∏–π)
            if len(result) < 10:
                music_prompt = self._get_music_transcription_prompt()
                result_music = self._transcribe_with_language(file_path, None, music_prompt, debug)
                if len(result_music) > len(result):
                    result = result_music
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç–æ–º
            result = self._filter_prompt_from_result(result, strict_prompt)
            
            return result
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return ""
    
    def _filter_prompt_from_result(self, result: str, prompt: str) -> str:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            prompt: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        if not result or not prompt:
            return result
        
        result_lower = result.lower().strip()
        prompt_lower = prompt.lower().strip()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–ø—Ç
        if (result_lower == prompt_lower or 
            len(result_lower) > 50 and prompt_lower in result_lower or
            len(result_lower) > 100 and len(prompt_lower) / len(result_lower) > 0.7):
            return ""
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –ø—Ä–æ–º–ø—Ç–∞
        prompt_keywords = [
            "–¥–æ—Å–ª–æ–≤–Ω—É—é", "–ø–æ–ª–Ω—É—é", "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", "–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞", 
            "—Å–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫", "–Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π", "–Ω–µ —Å–æ–∫—Ä–∞—â–∞–π", "–Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–π"
        ]
        
        keyword_matches = sum(1 for keyword in prompt_keywords if keyword in result_lower)
        if keyword_matches > len(prompt_keywords) // 2:
            print(f"üîç –¢–µ–∫—Å—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –Ω–∞–π–¥–µ–Ω–æ {keyword_matches} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞ –≤ '{result}'")
            return ""
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if self._is_likely_hallucination(result_lower):
            print(f"üîç –û—Ç–ª–∞–¥–∫–∞: —Ç–µ–∫—Å—Ç '{result}' –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è")
            return ""
        
        return result
    
    def _is_likely_hallucination(self, text: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ–π –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—é
        """
        if not text or len(text) < 3:
            return False
        
        import re
        
        # 1. –û—á–µ–≤–∏–¥–Ω—ã–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ - –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏
        if len(text) <= 5 and re.match(r'^[.!?,#\-_]+$', text):
            return True
        
        # 2. –¢–µ–∫—Å—Ç—ã —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
        if re.match(r'^[^–∞-—è—ëa-z\s]+$', text):
            return True
        
        # 3. –¢–µ–∫—Å—Ç—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö (–æ–ø–∏—Å–∞–Ω–∏—è –∑–≤—É–∫–æ–≤)
        if text.startswith('[') and text.endswith(']'):
            return True
        
        # 4. –¢–µ–∫—Å—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –ø–æ–¥—Ä—è–¥
        if re.search(r'(.)\1{2,}', text):  # 3+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥
            return True
        
        # 5. –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–ª–æ–≤–∞–º–∏
        words = text.split()
        if len(words) <= 3 and len(set(words)) < len(words):
            return True
        
        # 6. –¢–µ–∫—Å—Ç—ã —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –º–µ–∂–¥–æ–º–µ—Ç–∏–π –∏ –∑–≤—É–∫–æ–≤
        interjections = ['–∞', '–æ', '—É', '—ç', '—ã', '–∏', '–µ', '—ë', '—é', '—è', '–º', '–Ω', '–∫', '—Ç', '–ø', '—Å', '—à', '—á', '–∂', '—Ü', '—Ö', '—Ñ', '–≤', '–±', '–¥', '–≥', '–∑', '–ª', '—Ä', '–π']
        if all(word.lower() in interjections for word in words):
            return True
        
        return False
    
    def _transcribe_with_language(self, file_path: str, language: Optional[str], prompt: str, debug: bool) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º –∏ –ø—Ä–æ–º–ø—Ç–æ–º.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            language: –Ø–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            with open(file_path, 'rb') as audio_file:
                params = {
                    "model": "gpt-4o-transcribe",
                    "file": audio_file,
                    "response_format": "text",
                    "prompt": prompt
                }
                if language:
                    params["language"] = language
                
                transcript = openai.audio.transcriptions.create(**params)
            
            result = transcript.strip()
            if debug:
                lang_label = language or "–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–ª–∞–¥–∫–µ
                filtered_result = self._filter_prompt_from_result(result, prompt)
                if filtered_result != result:
                    print(f"üìù –° —è–∑—ã–∫–æ–º ({lang_label}): '{result}' ‚Üí –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ‚Üí '{filtered_result}'")
                else:
                    print(f"üìù –° —è–∑—ã–∫–æ–º ({lang_label}): '{result}'")
            
            return result
            
        except Exception as e:
            if debug:
                lang_label = language or "–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å —è–∑—ã–∫–æ–º ({lang_label}): {e}")
            return ""
    
    def classify_audio(self, file_path: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞—É–¥–∏–æ: '–º—É–∑—ã–∫–∞', '—Ä–µ—á—å' –∏–ª–∏ '—à—É–º'
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            strict_prompt = self._get_transcription_prompt()
            transcript_text = self._transcribe_with_language(file_path, self.primary_language, strict_prompt, False)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            transcript_text = self._filter_prompt_from_result(transcript_text, strict_prompt)
            
            if not transcript_text:
                return "—à—É–º"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            classification_result = self._classify_with_ai(transcript_text)
            
            return classification_result
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return "—à—É–º"
    
    def _classify_with_ai(self, transcript_text: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Args:
            transcript_text: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞—É–¥–∏–æ: '–º—É–∑—ã–∫–∞', '—Ä–µ—á—å' –∏–ª–∏ '—à—É–º'
        """
        try:
            system_prompt = """–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π.
–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –º—É–∑—ã–∫–∞, —Ä–µ—á—å, —à—É–º.

–í–ê–ñ–ù–û: –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞, –∞ –Ω–µ —Å–∞–º –∞—É–¥–∏–æ—Ñ–∞–π–ª. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ:
- –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –±—ã–ª–∞ –º—É–∑—ã–∫–∞ —Å –≤–æ–∫–∞–ª–æ–º, —Ç–æ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±—É–¥—É—Ç —Å–ª–æ–≤–∞ –ø–µ—Å–Ω–∏
- –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –±—ã–ª–∞ —Ä–µ—á—å, —Ç–æ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±—É–¥–µ—Ç —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç
- –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –±—ã–ª —à—É–º, —Ç–æ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±—É–¥–µ—Ç –º–∞–ª–æ —Å–ª–æ–≤ –∏–ª–∏ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:

–ú—É–∑—ã–∫–∞ (music):
- –≠—Ç–æ –ø–µ—Å–Ω—è, –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –≤–æ–∫–∞–ª–æ–º
- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:
  * –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã –∏–ª–∏ —Å–ª–æ–≤–∞ (–ø—Ä–∏–ø–µ–≤)
  * –†–∏—Ñ–º—ã –∏ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  * –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏: "–ª–∞-–ª–∞-–ª–∞", "–Ω–∞-–Ω–∞-–Ω–∞", "–æ-–æ-–æ", "–∞-–∞-–∞"
  * –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è: "–ê—É—Ñ!", "–û–π!", "–ê—Ö!"
  * –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑–∏
  * –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–≤—É—á–∞—Ç –∫–∞–∫ –ø–µ—Å–Ω—è, –∞ –Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–∞—è —Ä–µ—á—å

–†–µ—á—å (speech):
- –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Ä–µ—á—å, —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–∏–∞–ª–æ–≥
- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:
  * –°–≤—è–∑–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  * –û–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
  * –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
  * –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—ã—Å–ª–µ–π
  * –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

–®—É–º (noise):
- –≠—Ç–æ –Ω–µ—Ä–µ—á–µ–≤—ã–µ –∑–≤—É–∫–∏, —à—É–º, —Ç–µ—Ö–Ω–∏–∫–∞
- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:
  * –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
  * –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–≤—è–∑–Ω–æ–π —Ä–µ—á–∏
  * –°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∑–≤—É–∫–∏
  * –û–ø–∏—Å–∞–Ω–∏—è –∑–≤—É–∫–æ–≤: "[Music]", "[–∑–≤—É–∫]", "[—à—É–º]"

–ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:
1. –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤—è–∑–Ω—É—é —Ä–µ—á—å —Å –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ‚Üí speech
2. –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã, —Ä–∏—Ñ–º—ã, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ ‚Üí music
3. –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∞—è, –±–µ—Å—Å–≤—è–∑–Ω–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∑–≤—É–∫–æ–≤ ‚Üí noise
4. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö –º–µ–∂–¥—É music –∏ speech: –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ ‚Üí music

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{
  "classification": "music | speech | noise",
  "confidence": 0.0-1.0,
  "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞: –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±—ã–ª–∏ —Ä–µ—à–∞—é—â–∏–º–∏"
}

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ JSON
- –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ "classification"
- –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (confidence) –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:
  * 0.9‚Äì1.0 ‚Üí –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  * 0.6‚Äì0.89 ‚Üí —É–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  * <0.6 ‚Üí –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã"""

            response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∞—É–¥–∏–æ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –µ–≥–æ:\n\n{transcript_text}"}
                ],
                temperature=0.1,
                max_tokens=200
            )
            
            result_text = response.choices[0].message.content.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            import json
            try:
                result = json.loads(result_text)
                classification = result.get("classification", "noise")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä—É—Å—Å–∫–∏–µ
                if classification == "music":
                    return "–º—É–∑—ã–∫–∞"
                elif classification == "speech":
                    return "—Ä–µ—á—å"
                else:
                    return "—à—É–º"
                    
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
                result_lower = result_text.lower()
                if "music" in result_lower or "–º—É–∑—ã–∫–∞" in result_lower:
                    return "–º—É–∑—ã–∫–∞"
                elif "speech" in result_lower or "—Ä–µ—á—å" in result_lower:
                    return "—Ä–µ—á—å"
                else:
                    return "—à—É–º"
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ò–ò-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return "—à—É–º"
    
    def analyze_audio(self, file_path: Path, debug: bool = False) -> Dict[str, Union[str, float, datetime]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {file_path.name}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        converted_path = self.convert_audio_format(file_path)
        
        if debug:
            print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_path.absolute()}")
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_path.stat().st_size / (1024 * 1024):.2f} –ú–ë")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        print("üìù –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
        transcript = self.transcribe_audio(converted_path, debug)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        print("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –∞—É–¥–∏–æ...")
        audio_type = self.classify_audio(converted_path)
        
        if debug:
            print(f"üè∑Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {audio_type}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if converted_path != str(file_path) and os.path.exists(converted_path):
            try:
                os.unlink(converted_path)
            except OSError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
        return {
            'file_name': file_path.name,
            'file_path': str(file_path.absolute()),
            'file_size_mb': file_path.stat().st_size / (1024 * 1024),
            'audio_type': audio_type,
            'transcript': transcript,
            'analysis_time': datetime.now()
        }
    
    def analyze_all_files(self, folder: str, debug: bool = False) -> List[Dict[str, Union[str, float, datetime]]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.
        
        Args:
            folder: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
            debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        """
        print(f"üîç –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {folder}")
        
        try:
            files = self.list_audio_files(folder)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
            
            results = []
            for i, file_path in enumerate(files, 1):
                print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª {i}/{len(files)}: {file_path.name}")
                
                result = self.analyze_audio(file_path, debug)
                results.append(result)
                
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {result['audio_type']}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return []
    
    def save_results(self, results: List[Dict[str, Union[str, float, datetime]]], filename: Optional[str] = None, single_file: bool = False) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            single_file: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if filename is None:
            if single_file and len(results) == 1:
                # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                file_name = results[0].get('file_name', 'unknown')
                safe_name = Path(file_name).stem.replace(' ', '_').replace('(', '').replace(')', '')
                filename = f"result_{safe_name}.txt"
            else:
                # –î–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"result_{timestamp}.txt"
        
        filepath = Path(filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ê–£–î–ò–û–§–ê–ô–õ–û–í\n")
            f.write("="*60 + "\n")
            f.write(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(results)}\n\n")
            
            for i, result in enumerate(results, 1):
                f.write("="*40 + "\n")
                f.write(f"–§–ê–ô–õ {i}: {result['file_name']}\n")
                f.write("="*40 + "\n")
                f.write(f"üìÅ –§–∞–π–ª: {result['file_name']}\n")
                f.write(f"üìä –†–∞–∑–º–µ—Ä: {result['file_size_mb']:.2f} –ú–ë\n")
                f.write(f"üè∑Ô∏è –¢–∏–ø –∞—É–¥–∏–æ: {result['audio_type']}\n")
                f.write(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n")
                f.write(f"   {result['transcript']}\n")
                f.write(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['analysis_time'].isoformat()}\n\n")
        
        return str(filepath.absolute())


def create_argument_parser() -> argparse.ArgumentParser:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    """
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py examples                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
  python main.py --all-files examples       # –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  python main.py --file examples/song.mp3   # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python main.py --all-files examples --debug --save  # –° –æ—Ç–ª–∞–¥–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        """
    )
    
    parser.add_argument(
        'folder',
        nargs='?',
        default='examples',
        help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: examples)'
    )
    
    parser.add_argument(
        '--all-files',
        action='store_true',
        help='–ü–∞–∫–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ'
    )
    
    parser.add_argument(
        '--file',
        type=str,
        help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: examples/song.mp3)'
    )
    
    parser.add_argument(
        '--save',
        action='store_true',
        default=True,
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª result_{time}.txt (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ)'
    )
    
    parser.add_argument(
        '--no-save',
        action='store_true',
        help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞'
    )
    
    parser.add_argument(
        '--primary-lang',
        type=str,
        default='ru',
        help='–û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru)'
    )
    
    parser.add_argument(
        '--secondary-lang',
        type=str,
        default='en',
        help='–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: en)'
    )
    
    return parser


def print_results(results: List[Dict[str, Union[str, float, datetime]]]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("="*50)
    
    for i, result in enumerate(results, 1):
        print(f"\n--- –§–ê–ô–õ {i}/{len(results)} ---")
        print(f"üìÅ –§–∞–π–ª: {result['file_name']}")
        print(f"üè∑Ô∏è –¢–∏–ø –∞—É–¥–∏–æ: {result['audio_type']}")
        print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        if result['transcript']:
            print(f"   {result['transcript']}")
        else:
            print("   –†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    print("\n" + "="*50)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    parser = create_argument_parser()
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.no_save:
        args.save = False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —è–∑—ã–∫–æ–≤
        analyzer = AudioAnalyzer(
            primary_language=args.primary_lang,
            secondary_language=args.secondary_lang
        )
        
        if args.debug:
            print("üêõ –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù")
            print(f"üìÅ –ü–∞–ø–∫–∞: {args.folder}")
            print(f"üîÑ –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {args.all_files}")
            print(f"üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª: {args.file}")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {args.save}")
            print(f"üåç –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: {args.primary_lang}")
            print(f"üåç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫: {args.secondary_lang}")
            print("-" * 50)
        
        results = []
        
        # –†–µ–∂–∏–º 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if args.file:
            file_path = Path(args.file)
            if not file_path.exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file}")
                return
            
            result = analyzer.analyze_audio(file_path, args.debug)
            results.append(result)
            
            print("\n" + "="*50)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
            print("="*50)
            print(f"üìÅ –§–∞–π–ª: {result['file_name']}")
            print(f"üè∑Ô∏è –¢–∏–ø –∞—É–¥–∏–æ: {result['audio_type']}")
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            if result['transcript']:
                print(f"   {result['transcript']}")
            else:
                print("   –†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            print("="*50)
        
        # –†–µ–∂–∏–º 2: –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        elif args.all_files:
            results = analyzer.analyze_all_files(args.folder, args.debug)
            print_results(results)
        
        # –†–µ–∂–∏–º 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        else:
            print(f"üîç –ò—â—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: {args.folder}")
            try:
                files = analyzer.list_audio_files(args.folder)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
                
                chosen_file = analyzer.choose_file(files)
                if chosen_file:
                    result = analyzer.analyze_audio(chosen_file, args.debug)
                    results.append(result)
                    
                    print("\n" + "="*50)
                    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
                    print("="*50)
                    print(f"üìÅ –§–∞–π–ª: {result['file_name']}")
                    print(f"üè∑Ô∏è –¢–∏–ø –∞—É–¥–∏–æ: {result['audio_type']}")
                    print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                    if result['transcript']:
                        print(f"   {result['transcript']}")
                    else:
                        print("   –†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                    print("="*50)
                else:
                    print("üëã –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return
            except FileNotFoundError as e:
                print(f"‚ùå {e}")
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.save and results:
            single_file_mode = len(results) == 1
            saved_file = analyzer.save_results(results, single_file=single_file_mode)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {saved_file}")
        
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()