#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import os
import sys
from pathlib import Path

def test_audio_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    print("=" * 50)
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['main.py', 'requirements.txt', 'README.md']
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
        else:
            print(f"‚úÖ –§–∞–π–ª {file} –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É examples
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ examples:")
    examples_dir = Path('examples')
    if not examples_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ examples –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        all_good = False
    else:
        print("‚úÖ –ü–∞–ø–∫–∞ examples –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        supported_formats = ['*.mp3', '*.wav', '*.m4a', '*.flac']
        audio_files = []
        for pattern in supported_formats:
            audio_files.extend(examples_dir.glob(pattern))
        
        if audio_files:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:")
            for file in audio_files:
                file_size = file.stat().st_size / (1024 * 1024)
                print(f"   - {file.name} ({file_size:.1f} –ú–ë)")
        else:
            print("‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ examples/ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python create_test_files.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    env_file = Path('.env')
    if env_file.exists():
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'OPENAI_API_KEY' in content:
                    print("‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω –≤ .env")
                else:
                    print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
                    all_good = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
            all_good = False
    else:
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   OPENAI_API_KEY=your_openai_api_key_here")
        all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    try:
        import openai
        print("‚úÖ openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install openai")
        all_good = False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install python-dotenv")
        all_good = False
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import questionary
        print("‚úÖ questionary —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    except ImportError:
        print("‚ÑπÔ∏è questionary –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    try:
        from pydub import AudioSegment
        print("‚úÖ pydub —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    except ImportError:
        print("‚ÑπÔ∏è pydub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if all_good:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüéØ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python main.py examples")
        print("   python main.py --all-files examples")
        print("   python main.py --file examples/song.mp3")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    
    return all_good

if __name__ == "__main__":
    test_audio_analyzer()
